application {
  name = webKnossos
  branch = local
  version = "1.0.0-1"
}

play.modules.enabled += "WebKnossosModule"
play.modules.enabled += "SilhouetteModule"
play.modules.enabled += "com.scalableminds.webknossos.datastore.DataStoreModule"
play.modules.enabled += "com.scalableminds.webknossos.tracingstore.TracingStoreModule"

datastore {
  enabled = true
  key = "something-secure"
  name = "localhost"
  publicUri = "http://localhost:9000"
  debugMode = true
  webKnossos {
    uri = "http://localhost:9000"
    pingIntervalMinutes = 10
  }
  fossildb {
    address = "localhost"
    port = 7155
  }
}

tracingstore {
  enabled = true
  key = "something-secure"
  name = "localhost"
  publicUri = "http://localhost:9000"
  webKnossos {
    uri = "http://localhost:9000"
    pingIntervalMinutes = 10
  }
  fossildb {
    address = "localhost"
    port = 7155
  }
  redis {
    address = "localhost"
    port = 6379
  }
}

http {
  uri = "http://localhost:9000"
  address = "127.0.0.1"
  port = 9000
}

user.cacheTimeoutInMinutes = 3

braintracing {
  active = false
  organizationName = "sample_organization" // only users signing up for this organization will be registered on braintracing
  url = "http://braintracing.org/"
  createUserScript = "oxalis_create_user.php"
  user = "changeMe"
  password = "changeMe"
  license = "changeMe"
}

application {
  insertInitialData = true
  insertLocalConnectDatastore = false
  authentication {
    enableDevAutoLogin = false
    enableDevAutoAdmin = false
    defaultUser = {
      email = "scmboy@scalableminds.com"
      password = "secret"
      isSuperUser = true
    }
    ssoKey = "something secure"
  }
  title = "webKnossos"
}

play.http.secret.key = "$JUeGY5yhw~pw%`pyVeDF*}`sF^kL'@sF$=dSTx?<z*f/vFg"

features {
  # this part of the config is exposed as JSON via /api/features
  discussionBoard = "https://support.webknossos.org"
  discussionBoardRequiresAdmin = false
  addForeignDataset = false
  hideNavbarLogin = false
  # if isDemoInstance is true, / will always be the /spotlight page
  # if it is false, / will be the login page, if not logged in, and the dashboard otherwise
  isDemoInstance = false
  autoBrushReadyDatasets = []
  taskReopenAllowedInSeconds = 30
  allowDeleteDatasets = true
}

# Actor settings
# ~~~~~
actor.defaultTimeout = 10
js.defaultTimeout = 5
akka.loggers = ["akka.event.slf4j.Slf4jLogger"]

# Binary data settings
# ~~~~~
braingames.binary {
  cacheMaxSize = 40 # number of entries
  mappingCacheMaxSize = 5 # number of entries
  agglomerateFileCacheMaxSize = 15 # number of entries
  agglomerateCacheMaxSize = 625000 # number of entries
  agglomerateStandardBlockSize = 512 # standard block size of cache reads, best size ~= file block size / bytes per id
  agglomerateMaxReaderRange = 1310720 # max size per read when using cumsum.json
  loadTimeout = 10 # in seconds
  saveTimeout = 10 # in seconds
  isosurfaceTimeout = 30 # in seconds
  isosurfaceActorPoolSize = 1
  baseFolder = binaryData

  changeHandler {
    enabled = true
    tickerInterval = 1 # in minutes
  }
}

webKnossos {
  user.time.tracingPauseInSeconds = 60
  tasks.maxOpenPerUser = 5
  query.maxResults = 100
  newOrganizationMailingList = ""
}

# Email configuration
# ~~~~~
mail {
  enabled = true
  smtp { # To be defined in secrets.conf
    host = ""
    port = 465
    tls = true
    auth = true
    user = ""
    pass = ""
  }
  defaultSender = "no-reply@webknossos.org"
  demoSender = ""
}

# Airbrake config (optional)
# ~~~~~
airbrake { # To be defined in secrets.conf
  apiKey = "empty"
  ssl = false
  enabled = false
  endpoint = "api.airbrake.io/notifier_api/v2/notices"
  environment = "dev-local-"${application.branch}
  projectKey = "empty"
  projectID = "empty"
}

slackNotifications {
  url = "empty"
}

mail.reply = "No reply <no-reply@webknossos.org>"

# other settings
play.http.parser.maxMemoryBuffer = 250M
play.http.parser.maxDiskBuffer = 1G

slick = {
  profile = "slick.jdbc.PostgresProfile$"
  codegen.package = "com.scalableminds.webknossos.schema"
  db = {
    url = "jdbc:postgresql://localhost/webknossos"
    url = ${?POSTGRES_URL}
    driver = org.postgresql.Driver
    keepAliveConnection = true
    user = "postgres"
    password = "postgres"
    queueSize = 5000
  }
}

google.analytics.trackingID = ""

silhouette {
  cookieAuthenticator {
    cookieName = "id"
    cookiePath = "/"
    secureCookie = false
    httpOnlyCookie = true
    useFingerprinting = true
    authenticatorExpiry = 30 days
    cookieMaxAge = 365 days
  }

  tokenAuthenticator {
    authenticatorExpiry = 23000 days # must fit as seconds in 32bit signed int
    authenticatorIdleTimeout = 23000 days
    resetPasswordExpiry = 1 day
    dataStoreExpiry = 1 day
  }

  oauth1TokenSecretProvider {
    cookieName = "OAuth1TokenSecret"
    cookiePath = "/"
    secureCookie = false
    httpOnlyCookie = true
    expirationTime = 5 minutes
  }
}

play.http.filters = "com.scalableminds.webknossos.datastore.Filters"
# we do not want to set *all* of the security filters, though:
play.filters.headers.contentSecurityPolicy = null
play.filters.headers.contentTypeOptions = null
play.filters.headers.frameOptions = null

# Note that these take effect only in production mode (timeouts are shorter in dev)
play.server.http.idleTimeout = 1000s
play.server.akka.requestTimeout = 1000s

# Avoid the creation of a pid file
pidfile.path = "/dev/null"

operatorData = """
  **This is a dev deployment**

  Please add the information of the operator to comply with GDPR.
"""
