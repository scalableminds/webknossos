# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET           /api/buildinfo                                                    controllers.Application.buildInfo
POST          /api/analytics/:namespace                                         controllers.Application.analytics(namespace)

# Authentication
GET           /api/auth/autoLogin                                               controllers.Authentication.autoLogin
POST          /api/auth/register                                                controllers.Authentication.handleRegistration
POST          /api/auth/login                                                   controllers.Authentication.authenticate
GET           /api/auth/token                                                   controllers.Authentication.getToken
DELETE        /api/auth/token                                                   controllers.Authentication.deleteToken
GET           /api/auth/switch                                                  controllers.Authentication.switchTo(to: String)
POST          /api/auth/startResetPassword                                      controllers.Authentication.handleStartResetPassword
POST          /api/auth/changePassword                                          controllers.Authentication.changePassword
POST          /api/auth/resetPassword                                           controllers.Authentication.handleResetPassword
GET           /api/auth/logout                                                  controllers.Authentication.logout
GET           /api/auth/sso                                                     controllers.Authentication.singleSignOn(sso: String, sig: String)

# Configurations
GET           /api/userConfigurations/default                                   controllers.ConfigurationController.default
GET           /api/user/userConfiguration                                       controllers.ConfigurationController.read
POST          /api/user/userConfiguration                                       controllers.ConfigurationController.update
GET           /api/dataSetConfigurations/default                                controllers.ConfigurationController.defaultDataSet
GET           /api/dataSetConfigurations/:dataSetName                           controllers.ConfigurationController.readDataSet(dataSetName: String)
POST          /api/dataSetConfigurations/:dataSetName                           controllers.ConfigurationController.updateDataSet(dataSetName: String)

# Users
GET           /api/user/tasks/request                                           controllers.TaskController.request
GET           /api/user/tasks/peek                                              controllers.TaskController.peekNext(limit: Int ?= 10)

GET           /api/users                                                        controllers.UserController.list
GET           /api/user                                                         controllers.UserController.current
GET           /api/user/tasks                                                   controllers.UserController.tasks(isFinished: Option[Boolean], limit: Option[Int])
GET           /api/user/annotations                                             controllers.UserController.annotations(isFinished: Option[Boolean], limit: Option[Int])
GET           /api/user/loggedTime                                              controllers.UserController.loggedTime
GET           /api/users/:id                                                    controllers.UserController.user(id: String)
PUT           /api/users/:id                                                    controllers.UserController.update(id: String)
GET           /api/users/:id/tasks                                              controllers.UserController.userTasks(id: String, isFinished: Option[Boolean], limit: Option[Int])
GET           /api/users/:id/loggedTime                                         controllers.UserController.userLoggedTime(id: String)
POST          /api/users/loggedTime                                             controllers.UserController.usersLoggedTime
GET           /api/users/:id/annotations                                        controllers.UserController.userAnnotations(id: String, isFinished: Option[Boolean], limit: Option[Int])
GET           /api/users/:id/annotations/download                               controllers.AnnotationIOController.userDownload(id: String)

# Team
GET           /api/teams                                                        controllers.TeamController.list
GET           /api/allTeams                                                     controllers.TeamController.listAllTeams
POST          /api/teams                                                        controllers.TeamController.create
DELETE        /api/teams/:id                                                    controllers.TeamController.delete(id: String)

# DataSets
GET           /datasets/:dataSetName/view                                       controllers.DataSetController.view(dataSetName: String)
GET           /datasets/:dataSetName/trace                                      controllers.AnnotationController.createExplorational(dataSetName: String, typ: String, withFallback: Option[Boolean])

GET           /api/datasets                                                     controllers.DataSetController.list
POST          /api/datasets                                                     controllers.DataSetController.create(typ: String)
GET           /api/datasets/:dataSetName                                        controllers.DataSetController.read(dataSetName: String)
POST          /api/datasets/:dataSetName                                        controllers.DataSetController.update(dataSetName: String)
GET           /api/datasets/:dataSetName/accessList                             controllers.DataSetController.accessList(dataSetName: String)
POST          /api/datasets/:dataSetName/teams                                  controllers.DataSetController.updateTeams(dataSetName: String)
GET           /api/datasets/:dataSetName/layers/:layer/thumbnail                controllers.DataSetController.thumbnail(dataSetName: String, layer: String)

# Datastores
GET           /api/datastores                                                   controllers.DataStoreController.list
POST          /api/datastores/:name/datasource                                  controllers.WKDataStoreController.updateOne(name: String)
POST          /api/datastores/:name/datasources                                 controllers.WKDataStoreController.updateAll(name: String)
POST          /api/datastores/:name/status                                      controllers.WKDataStoreController.statusUpdate(name: String)
POST          /api/datastores/:name/handleTracingUpdateReport                   controllers.WKDataStoreController.handleTracingUpdateReport(name: String)
POST          /api/datastores/:name/verifyUpload                                controllers.WKDataStoreController.validateDataSetUpload(name: String)
POST          /api/datastores/:name/validateUserAccess                          controllers.UserTokenController.validateUserAccess(name: String, token: String)

# User access tokens for datastore authentification
GET           /api/userToken/generate                                           controllers.UserTokenController.generateUserToken

# Annotations
POST          /annotations/upload                                               controllers.AnnotationIOController.upload
GET           /annotations/:typ/:id/duplicate                                   controllers.AnnotationController.duplicate(typ: String, id: String)
POST          /annotations/:typ/:id/edit                                        controllers.AnnotationController.editAnnotation(typ: String, id: String)

GET           /annotations/:typ/:id/finishAndRedirect                           controllers.AnnotationController.finishWithRedirect(typ: String, id: String)
GET           /annotations/:typ/:id/finish                                      controllers.AnnotationController.finish(typ: String, id: String)
POST          /annotations/:typ/finish                                          controllers.AnnotationController.finishAll(typ: String)
GET           /annotations/:typ/:id/reopen                                      controllers.AnnotationController.reopen(typ: String, id: String)
GET           /annotations/:typ/:id/reset                                       controllers.AnnotationController.reset(typ: String, id: String)
GET           /annotations/:typ/:id/revert                                      controllers.AnnotationController.revert(typ: String, id: String, version: Int)
POST          /annotations/:typ/:id/transfer                                    controllers.AnnotationController.transfer(typ: String, id: String)

GET           /annotations/:typ/:id                                             controllers.AnnotationController.empty(typ: String, id: String)
GET           /annotations/:typ/:id/readOnly                                    controllers.AnnotationController.emptyReadOnly(typ: String, id: String)

GET           /annotations/:typ/:id/info                                        controllers.AnnotationController.info(typ: String, id: String)
GET           /annotations/:typ/:id/readOnly/info                               controllers.AnnotationController.infoReadOnly(typ: String, id: String)
DELETE        /annotations/:typ/:id                                             controllers.AnnotationController.cancel(typ: String, id: String)
GET           /annotations/:typ/:id/merge/:mergedTyp/:mergedId                  controllers.AnnotationController.merge(typ: String, id: String, mergedTyp: String, mergedId: String)
GET           /annotations/:typ/:id/download                                    controllers.AnnotationIOController.download(typ: String, id: String)

GET           /api/annotations/:typ/:id/loggedTime                              controllers.AnnotationController.loggedTime(typ: String, id: String)

# Tasks
GET           /api/tasks                                                        controllers.TaskController.list
POST          /api/tasks                                                        controllers.TaskController.create
POST          /api/tasks/createFromFile                                         controllers.TaskController.createFromFile
POST          /api/tasks/list                                                   controllers.TaskController.listTasks
GET           /api/tasks/:id                                                    controllers.TaskController.read(id: String)
DELETE        /api/tasks/:id                                                    controllers.TaskController.delete(id: String)
PUT           /api/tasks/:id                                                    controllers.TaskController.update(id: String)
GET           /api/tasks/:id/annotations                                        controllers.AnnotationController.annotationsForTask(id: String)

# TaskTypes
GET           /api/taskTypes                                                    controllers.TaskTypeController.list
POST          /api/taskTypes                                                    controllers.TaskTypeController.create
DELETE        /api/taskTypes/:id                                                controllers.TaskTypeController.delete(id: String)
GET           /api/taskTypes/:id/tasks                                          controllers.TaskController.listTasksForType(id: String)
GET           /api/taskTypes/:id                                                controllers.TaskTypeController.get(id: String)
PUT           /api/taskTypes/:id                                                controllers.TaskTypeController.update(id: String)

# Scripts
GET           /api/scripts                                                      controllers.ScriptsController.list
POST          /api/scripts                                                      controllers.ScriptsController.create
GET           /api/scripts/:id                                                  controllers.ScriptsController.get(id: String)
PUT           /api/scripts/:id                                                  controllers.ScriptsController.update(id: String)
DELETE        /api/scripts/:id                                                  controllers.ScriptsController.delete(id: String)

# Projects
GET           /api/projects                                                     controllers.ProjectController.list
GET           /api/projects/assignments                                         controllers.ProjectController.listWithStatus
POST          /api/projects                                                     controllers.ProjectController.create
GET           /api/projects/:name                                               controllers.ProjectController.read(name: String)
DELETE        /api/projects/:name                                               controllers.ProjectController.delete(name: String)
PUT           /api/projects/:name                                               controllers.ProjectController.update(name: String)
GET           /api/projects/:name/tasks                                         controllers.ProjectController.tasksForProject(name: String)
GET           /api/projects/:name/pause                                         controllers.ProjectController.pause(name: String)
GET           /api/projects/:name/resume                                        controllers.ProjectController.resume(name: String)
GET           /api/projects/:name/usersWithOpenTasks                            controllers.ProjectController.usersWithOpenTasks(name:String)

# Statistics
GET           /api/statistics/webknossos                                        controllers.StatisticsController.webKnossos(interval: String, start: Option[Long], end: Option[Long])
GET           /api/statistics/users                                             controllers.StatisticsController.users(interval: String, start: Option[Long], end: Option[Long], limit: Int)

# Map static resources from the /public folder to the /public path
GET           /assets/*file                                                     controllers.Assets.at(path="/public", file)

#Timelogging
GET           /api/time/allusers/:year/:month                                   controllers.TimeController.getWorkingHoursOfAllUsers(year: Int, month: Int, startDay: Option[Int], endDay: Option[Int])
GET           /api/time/userlist/:year/:month                                   controllers.TimeController.getWorkingHoursOfUsers(email: String, year: Int, month: Int, startDay: Option[Int], endDay: Option[Int])
GET           /api/time/user/:userId                                            controllers.TimeController.getWorkingHoursOfUser(userId: String, startDate: Long, endDate: Long)
