version: 2
jobs:
  build_test_deploy:
    machine:
      image: ubuntu-2004:202111-02
      docker_layer_caching: false
    resource_class: large
    environment:
      USER_NAME: circleci
      USER_UID: 1000
      USER_GID: 1000
      TZ: Europe/Berlin
    steps:
      - run:
          name: "Clone Repository"
          command: |
            if [ -n "$CIRCLE_BRANCH" ]; then
              git clone --depth 5 "$CIRCLE_REPOSITORY_URL" --branch "$CIRCLE_BRANCH" --no-tags .
            fi
            if [ -n "$CIRCLE_TAG" ]; then
              git clone --depth 5 "$CIRCLE_REPOSITORY_URL" --branch "$CIRCLE_TAG" .
            fi
      - run:
          name: "Custom environment variables"
          command: |
            if [ -n "$CIRCLE_BRANCH" ]; then
              NORMALIZED_BRANCH=${CIRCLE_BRANCH//[\/-]/_}
              echo "export NORMALIZED_BRANCH=${NORMALIZED_BRANCH}" >> $BASH_ENV
              echo "export DOCKER_TAG=${NORMALIZED_BRANCH}__${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            fi
            if [ -n "$CIRCLE_TAG" ]; then
              echo "export NORMALIZED_BRANCH=master" >> $BASH_ENV
              echo "export DOCKER_TAG=${CIRCLE_TAG}" >> $BASH_ENV
            fi
      - run:
          name: Build webknossos-dev docker image
          command: |
            docker pull scalableminds/webknossos-dev:$NORMALIZED_BRANCH || true
            DEV_CACHE=$NORMALIZED_BRANCH docker-compose build base
      - run:
          name: Prepare dependency folders
          command: mkdir -p project/target target ~/.ivy2 ~/.cache/coursier
      - run:
          name: Install frontend dependencies
          command: docker-compose run -e PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true base yarn install --immutable
      - run:
          name: Assert unique evolution numbers
          command: docker-compose run base tools/postgres/dbtool.js assert-unique-evolution-numbers
      - run:
          name: Assert schema.sql and evolutions are equal
          command: |
            docker-compose up -d postgres
            sleep 3
            docker-compose run compile tools/postgres/dbtool.js check-evolutions-schema
      - run:
          name: Assert that all migrations are mentioned in one migration guide and that they have a reversion counterpart.
          command: tools/assert-complete-migrations.sh
      - run:
          name: Build frontend documentation
          command: |
            WK_VERSION=${CIRCLE_TAG:-${CIRCLE_BUILD_NUM:-dev}}
            docker-compose run base yarn run docs --project-version $WK_VERSION
      - run:
          name: Build webknossos (webpack)
          command: |
            docker-compose run base yarn build
      - run:
          name: Build webknossos (sbt)
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker-compose run compile sbt -no-colors clean compile stage
            else
              docker-compose run compile sbt -no-colors -DfailOnWarning compile stage
            fi
      - run:
          name: Build webknossos-datastore (sbt)
          command: docker-compose run base sbt -no-colors -DfailOnWarning "project webknossosDatastore" copyMessages compile stage

      - run:
          name: Build webknossos-tracingstore (sbt)
          command: docker-compose run base sbt -no-colors -DfailOnWarning "project webknossosTracingstore" copyMessages compile stage

      - run:
          name: Checksum App Dirs
          command: find app webknossos-datastore/app webknossos-tracingstore/app -type f -exec md5sum {} \; | sort -k 2 | md5sum > app_checksum.txt

      - run:
          name: Build webknossos docker image
          command: |
            docker pull scalableminds/webknossos:$NORMALIZED_BRANCH || true
            DEV_CACHE=$NORMALIZED_BRANCH docker-compose build --pull webknossos

      - run:
          name: Build webknossos-datastore docker image
          command: docker-compose build --pull webknossos-datastore

      - run:
          name: Build webknossos-tracingstore docker image
          command: docker-compose build --pull webknossos-tracingstore

      - run:
          name: Lint frontend code and check formatting
          command: |
            .circleci/not-on-master.sh docker-compose run base bash -c "yarn run check-frontend"
      - run:
          name: Check for cyclic dependencies in front-end
          command: |
            .circleci/not-on-master.sh docker-compose run base yarn check-cyclic-dependencies
      - run:
          name: Run frontend tests
          command: |
            .circleci/not-on-master.sh docker-compose run base yarn test-verbose
      - run:
          name: Lint backend code and check formatting
          command: |
            .circleci/not-on-master.sh docker-compose run backend-lint-format
      - run:
          name: Run backend tests
          command: |
            .circleci/not-on-master.sh docker-compose run backend-tests
      - run:
          name: Run end-to-end tests
          command: |
            mkdir -p binaryData/Organization_X && chmod 777 binaryData/Organization_X
            for i in {1..3}; do # retry
              .circleci/not-on-master.sh docker-compose run e2e-tests && s=0 && break || s=$?
            done
            (exit $s)
      - run:
          name: Validate frontend types
          command: |
            .circleci/not-on-master.sh docker-compose run base yarn typecheck
      - run:
          name: Start webknossos, datastore and tracingstore
          command: docker-compose up -d webknossos && docker-compose up -d webknossos-datastore && docker-compose up -d webknossos-tracingstore

      - run:
          name: Run webknossos smoke test
          command: |
            for i in {1..20}; do # retry
              curl --fail -v http://localhost:9000/api/health && s=0 && break || s=$?
              sleep 5
            done
            (exit $s)

      - run:
          name: Run webknossos-datastore smoke test
          command: |
            for i in {1..20}; do # retry
              curl --fail -v http://localhost:9090/data/health && s=0 && break || s=$?
              sleep 5
            done
            (exit $s)

      - run:
          name: Run webknossos-tracingstore smoke test
          command: |
            for i in {1..20}; do # retry
              curl --fail -v http://localhost:9050/tracings/health && s=0 && break || s=$?
              sleep 5
            done
            (exit $s)
      - run:
          name: Stop webknossos, datastore and tracingstore
          command: docker-compose down --volumes --remove-orphans

      - run:
          name: Push docker images
          command: |
            function retry() {
              for i in {1..5}; do
                "$@" && s=0 && break || s=$?
                sleep 10
              done
              return $s
            }
            retry sh -c 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
            retry docker-compose push webknossos
            retry docker-compose push webknossos-datastore
            retry docker-compose push webknossos-tracingstore
            if [ -n "$CIRCLE_BRANCH" ]; then
              docker tag \
                scalableminds/webknossos:${DOCKER_TAG} \
                scalableminds/webknossos:${NORMALIZED_BRANCH}
              retry docker push scalableminds/webknossos:${NORMALIZED_BRANCH}
              docker tag \
                scalableminds/webknossos-datastore:${DOCKER_TAG} \
                scalableminds/webknossos-datastore:${NORMALIZED_BRANCH}
              retry docker push scalableminds/webknossos-datastore:${NORMALIZED_BRANCH}
              docker tag \
                scalableminds/webknossos-tracingstore:${DOCKER_TAG} \
                scalableminds/webknossos-tracingstore:${NORMALIZED_BRANCH}
              retry docker push scalableminds/webknossos-tracingstore:${NORMALIZED_BRANCH}
              docker tag \
                scalableminds/webknossos-dev \
                scalableminds/webknossos-dev:${NORMALIZED_BRANCH}
              retry docker push scalableminds/webknossos-dev:${NORMALIZED_BRANCH}
            fi
            docker logout
      - run:
          name: Install dev deployment
          command: |
            if [ "${CIRCLE_BRANCH}" != "master" ]; then
              PR_URL="$CIRCLE_PULL_REQUEST"
              PR_NUMBER=$(echo $PR_URL | awk -F'/' '{print $NF}')
              SHOULD_AUTODEPLOY=$(curl "https://api.github.com/repos/scalableminds/webknossos/pulls/${PR_NUMBER}" | jq -e '.labels | .[] | select(.name == "autodeploy")')
              if [ "$?" -eq "0" ]
                then
                  echo "Starting autodeploy"
                  curl -X POST -H "X-Auth-Token: $RELEASE_API_TOKEN" "https://kubernetix.scm.io/hooks/install/webknossos/dev/${CIRCLE_BRANCH}?user=CI+%28nightly%29"
                  echo "\nInstalled to $NORMALIZED_BRANCH.webknossos.xyz"
                  # Install gh client
                  sudo mkdir -p -m 755 /etc/apt/keyrings && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
                  && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
                  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
                  && sudo apt update \
                  && sudo apt install gh -y
                  gh auth status
                  CURRENT_BODY=$(gh pr view $PR_NUMBER --json body | jq -r '.body')
                  echo "CURRENT_BODY=$CURRENT_BODY"
                  UPDATED_BODY=$(echo $CURRENT_BODY | sed "s|https://___.webknossos.xyz|https://$NORMALIZED_BRANCH.webknossos.xyz|g")
                  echo "UPDATED_BODY=$UPDATED_BODY"
                  echo $UPDATED_BODY | gh pr edit $PR_NUMBER -F -
              fi
            fi
      - run:
          name: Report coverage
          command: .circleci/not-on-master.sh docker-compose run base yarn coverage || true
      - run:
          name: Send Slack notification (master only)
          command: .circleci/slack-notification.sh


workflows:
  version: 2
  circleci_build:
    jobs:
      - build_test_deploy:
          context:
            - DockerHub
          filters:
            tags:
              only: /.*/
