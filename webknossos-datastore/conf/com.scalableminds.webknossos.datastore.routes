# Datastore Routes (Higher priority routes first)


# Health endpoint
GET           /health                                                                                                                       @com.scalableminds.webknossos.datastore.controllers.Application.health

# Read image data
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/data                                                             @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestViaWebknossos(organizationId: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/readData                                                         @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestRawCuboidPost(organizationId: String, datasetName: String, dataLayerName: String)
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/data                                                             @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestRawCuboid(organizationId: String, datasetName: String, dataLayerName: String, x: Int, y: Int, z: Int, width: Int, height: Int, depth: Int, mag: String, halfByte: Boolean ?= false, mappingName: Option[String])
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/thumbnail.jpg                                                    @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.thumbnailJpeg(organizationId: String, datasetName: String, dataLayerName: String, x: Int, y: Int, z: Int, width: Int, height: Int, mag: String, mappingName: Option[String], intensityMin: Option[Double], intensityMax: Option[Double], color: Option[String], invertColor: Option[Boolean])
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/findData                                                         @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.findData(organizationId: String, datasetName: String, dataLayerName: String)
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/histogram                                                        @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.histogram(organizationId: String, datasetName: String, dataLayerName: String)

# Knossos compatible routes
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/mag:resolution/x:x/y:y/z:z/bucket.raw                            @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestViaKnossos(organizationId: String, datasetName: String, dataLayerName: String, resolution: Int, x: Int, y: Int, z: Int, cubeSize: Int)

# Zarr2 compatible routes
GET           /zarr/:organizationId/:datasetName                                                                                            @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataSourceFolderContents(organizationId: String, datasetName: String, zarrVersion: Int = 2)
GET           /zarr/:organizationId/:datasetName/                                                                                           @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataSourceFolderContents(organizationId: String, datasetName: String, zarrVersion: Int = 2)
GET           /zarr/:organizationId/:datasetName/.zgroup                                                                                    @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestZGroup(organizationId: String, datasetName: String, dataLayerName="")
GET           /zarr/:organizationId/:datasetName/datasource-properties.json                                                                 @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataSource(organizationId: String, datasetName: String, zarrVersion: Int = 2)
GET           /zarr/:organizationId/:datasetName/:dataLayerName                                                                             @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerFolderContents(organizationId: String, datasetName: String, dataLayerName: String, zarrVersion: Int = 2)
GET           /zarr/:organizationId/:datasetName/:dataLayerName/                                                                            @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerFolderContents(organizationId: String, datasetName: String, dataLayerName: String, zarrVersion: Int = 2)
GET           /zarr/:organizationId/:datasetName/:dataLayerName/.zattrs                                                                     @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestZAttrs(organizationId: String, datasetName: String, dataLayerName: String)
GET           /zarr/:organizationId/:datasetName/:dataLayerName/.zgroup                                                                     @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestZGroup(organizationId: String, datasetName: String, dataLayerName: String)
GET           /zarr/:organizationId/:datasetName/:dataLayerName/:mag                                                                        @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerMagFolderContents(organizationId: String, datasetName: String, dataLayerName: String, mag: String, zarrVersion: Int = 2)
GET           /zarr/:organizationId/:datasetName/:dataLayerName/:mag/                                                                       @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerMagFolderContents(organizationId: String, datasetName: String, dataLayerName: String, mag: String, zarrVersion: Int = 2)
GET           /zarr/:organizationId/:datasetName/:dataLayerName/:mag/.zarray                                                                @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestZArray(organizationId: String, datasetName: String, dataLayerName: String, mag: String)
GET           /zarr/:organizationId/:datasetName/:dataLayerName/:mag/:coordinates                                                           @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestRawZarrCube(organizationId: String, datasetName: String, dataLayerName: String, mag: String, coordinates: String)

GET           /annotations/zarr/:accessTokenOrId                                                                                            @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceFolderContentsPrivateLink(accessTokenOrId: String, zarrVersion: Int = 2)
GET           /annotations/zarr/:accessTokenOrId/                                                                                           @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceFolderContentsPrivateLink(accessTokenOrId: String, zarrVersion: Int = 2)
GET           /annotations/zarr/:accessTokenOrId/.zgroup                                                                                    @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zGroupPrivateLink(accessTokenOrId: String,  dataLayerName="")
GET           /annotations/zarr/:accessTokenOrId/datasource-properties.json                                                                 @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceWithAnnotationPrivateLink(accessTokenOrId: String, zarrVersion: Int = 2)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName                                                                             @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerFolderContentsPrivateLink(accessTokenOrId: String,  dataLayerName: String, zarrVersion: Int = 2)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/                                                                            @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerFolderContentsPrivateLink(accessTokenOrId: String,  dataLayerName: String, zarrVersion: Int = 2)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/.zattrs                                                                     @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zAttrsWithAnnotationPrivateLink(accessTokenOrId: String, dataLayerName: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/.zgroup                                                                     @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zGroupPrivateLink(accessTokenOrId: String,  dataLayerName: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/:mag                                                                        @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerMagFolderContentsPrivateLink(accessTokenOrId: String,  dataLayerName: String, mag: String, zarrVersion: Int = 2)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/:mag/                                                                       @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerMagFolderContentsPrivateLink(accessTokenOrId: String,  dataLayerName: String, mag: String, zarrVersion: Int = 2)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/:mag/.zarray                                                                @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zArrayPrivateLink(accessTokenOrId: String, dataLayerName: String, mag: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/:mag/:coordinates                                                           @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.rawZarrCubePrivateLink(accessTokenOrId: String, dataLayerName: String, mag: String, coordinates: String)

# Zarr3 compatible routes
GET           /zarr3_experimental/:organizationId/:datasetName                                                                              @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataSourceFolderContents(organizationId: String, datasetName: String, zarrVersion: Int = 3)
GET           /zarr3_experimental/:organizationId/:datasetName/                                                                             @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataSourceFolderContents(organizationId: String, datasetName: String, zarrVersion: Int = 3)
GET           /zarr3_experimental/:organizationId/:datasetName/datasource-properties.json                                                   @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataSource(organizationId: String, datasetName: String, zarrVersion: Int = 3)
GET           /zarr3_experimental/:organizationId/:datasetName/:dataLayerName                                                               @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerFolderContents(organizationId: String, datasetName: String, dataLayerName: String, zarrVersion: Int = 3)
GET           /zarr3_experimental/:organizationId/:datasetName/:dataLayerName/                                                              @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerFolderContents(organizationId: String, datasetName: String, dataLayerName: String, zarrVersion: Int = 3)
GET           /zarr3_experimental/:organizationId/:datasetName/:dataLayerName/zarr.json                                                     @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestZarrJson(organizationId: String, datasetName: String, dataLayerName: String)
GET           /zarr3_experimental/:organizationId/:datasetName/:dataLayerName/:mag                                                          @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerMagFolderContents(organizationId: String, datasetName: String, dataLayerName: String, mag: String, zarrVersion: Int = 3)
GET           /zarr3_experimental/:organizationId/:datasetName/:dataLayerName/:mag/                                                         @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerMagFolderContents(organizationId: String, datasetName: String, dataLayerName: String, mag: String, zarrVersion: Int = 3)
GET           /zarr3_experimental/:organizationId/:datasetName/:dataLayerName/:mag/zarr.json                                                @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestZarrJsonForMag(organizationId: String, datasetName: String, dataLayerName: String, mag: String)
GET           /zarr3_experimental/:organizationId/:datasetName/:dataLayerName/:mag/:coordinates                                             @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestRawZarrCube(organizationId: String, datasetName: String, dataLayerName: String, mag: String, coordinates: String)

GET           /annotations/zarr3_experimental/:accessTokenOrId                                                                              @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceFolderContentsPrivateLink(accessTokenOrId: String, zarrVersion: Int = 3)
GET           /annotations/zarr3_experimental/:accessTokenOrId/                                                                             @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceFolderContentsPrivateLink(accessTokenOrId: String, zarrVersion: Int = 3)
GET           /annotations/zarr3_experimental/:accessTokenOrId/datasource-properties.json                                                   @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceWithAnnotationPrivateLink(accessTokenOrId: String, zarrVersion: Int = 3)
GET           /annotations/zarr3_experimental/:accessTokenOrId/:dataLayerName                                                               @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerFolderContentsPrivateLink(accessTokenOrId: String,  dataLayerName: String, zarrVersion: Int = 3)
GET           /annotations/zarr3_experimental/:accessTokenOrId/:dataLayerName/                                                              @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerFolderContentsPrivateLink(accessTokenOrId: String,  dataLayerName: String, zarrVersion: Int = 3)
GET           /annotations/zarr3_experimental/:accessTokenOrId/:dataLayerName/zarr.json                                                     @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zarrJsonWithAnnotationPrivateLink(accessTokenOrId: String, dataLayerName: String)
GET           /annotations/zarr3_experimental/:accessTokenOrId/:dataLayerName/:mag                                                          @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerMagFolderContentsPrivateLink(accessTokenOrId: String,  dataLayerName: String, mag: String, zarrVersion: Int = 3)
GET           /annotations/zarr3_experimental/:accessTokenOrId/:dataLayerName/:mag/                                                         @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerMagFolderContentsPrivateLink(accessTokenOrId: String,  dataLayerName: String, mag: String, zarrVersion: Int = 3)
GET           /annotations/zarr3_experimental/:accessTokenOrId/:dataLayerName/:mag/zarr.json                                                @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zarrJsonPrivateLink(accessTokenOrId: String, dataLayerName: String, mag: String)
GET           /annotations/zarr3_experimental/:accessTokenOrId/:dataLayerName/:mag/:coordinates                                             @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.rawZarrCubePrivateLink(accessTokenOrId: String, dataLayerName: String, mag: String, coordinates: String)

# Segmentation mappings
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/mappings/:mappingName                                            @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.mappingJson(organizationId: String, datasetName: String, dataLayerName: String, mappingName: String)
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/mappings                                                         @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listMappings(organizationId: String, datasetName: String, dataLayerName: String)

# Agglomerate files
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/agglomerates                                                     @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listAgglomerates(organizationId: String, datasetName: String, dataLayerName: String)
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/agglomerates/:mappingName/skeleton/:agglomerateId                @com.scalableminds.webknossos.datastore.controllers.DataSourceController.generateAgglomerateSkeleton(organizationId: String, datasetName: String, dataLayerName: String, mappingName: String, agglomerateId: Long)
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/agglomerates/:mappingName/agglomerateGraph/:agglomerateId        @com.scalableminds.webknossos.datastore.controllers.DataSourceController.agglomerateGraph(organizationId: String, datasetName: String, dataLayerName: String, mappingName: String, agglomerateId: Long)
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/agglomerates/:mappingName/largestAgglomerateId                   @com.scalableminds.webknossos.datastore.controllers.DataSourceController.largestAgglomerateId(organizationId: String, datasetName: String, dataLayerName: String, mappingName: String)
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/agglomerates/:mappingName/agglomeratesForSegments                @com.scalableminds.webknossos.datastore.controllers.DataSourceController.agglomerateIdsForSegmentIds(organizationId: String, datasetName: String, dataLayerName: String, mappingName: String)
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/agglomerates/:mappingName/agglomeratesForAllSegments             @com.scalableminds.webknossos.datastore.controllers.DataSourceController.agglomerateIdsForAllSegmentIds(organizationId: String, datasetName: String, dataLayerName: String, mappingName: String)
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/agglomerates/:mappingName/positionForSegment                     @com.scalableminds.webknossos.datastore.controllers.DataSourceController.positionForSegmentViaAgglomerateFile(organizationId: String, datasetName: String, dataLayerName: String, mappingName: String, segmentId: Long)

# Mesh files
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/meshes                                                           @com.scalableminds.webknossos.datastore.controllers.DSMeshController.listMeshFiles(organizationId: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/meshes/chunks                                                    @com.scalableminds.webknossos.datastore.controllers.DSMeshController.listMeshChunksForSegment(organizationId: String, datasetName: String, dataLayerName: String, targetMappingName: Option[String], editableMappingTracingId: Option[String])
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/meshes/chunks/data                                               @com.scalableminds.webknossos.datastore.controllers.DSMeshController.readMeshChunk(organizationId: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/meshes/fullMesh.stl                                              @com.scalableminds.webknossos.datastore.controllers.DSMeshController.loadFullMeshStl(organizationId: String, datasetName: String, dataLayerName: String)

# Connectome files
GET           /datasets/:organizationId/:datasetName/layers/:dataLayerName/connectomes                                                      @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listConnectomeFiles(organizationId: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/connectomes/synapses/positions                                   @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapsePositions(organizationId: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/connectomes/synapses/types                                       @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapseTypes(organizationId: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/connectomes/synapses/:direction                                  @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapticPartnerForSynapses(organizationId: String, datasetName: String, dataLayerName: String, direction: String)
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/connectomes/synapses                                             @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapsesForAgglomerates(organizationId: String, datasetName: String, dataLayerName: String)

# Ad-Hoc Meshing
POST          /datasets/:organizationId/:datasetName/layers/:dataLayerName/adHocMesh                                                        @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestAdHocMesh(organizationId: String, datasetName: String, dataLayerName: String)

# Segment-Index files
GET           /datasets/:organizationId/:dataSetName/layers/:dataLayerName/hasSegmentIndex                                                  @com.scalableminds.webknossos.datastore.controllers.DataSourceController.checkSegmentIndexFile(organizationId: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationId/:dataSetName/layers/:dataLayerName/segmentIndex                                                     @com.scalableminds.webknossos.datastore.controllers.DataSourceController.querySegmentIndex(organizationId: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationId/:dataSetName/layers/:dataLayerName/segmentIndex/:segmentId                                          @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSegmentIndex(organizationId: String, dataSetName: String, dataLayerName: String, segmentId: String)
POST          /datasets/:organizationId/:dataSetName/layers/:dataLayerName/segmentStatistics/volume                                         @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSegmentVolume(organizationId: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationId/:dataSetName/layers/:dataLayerName/segmentStatistics/boundingBox                                    @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSegmentBoundingBox(organizationId: String, dataSetName: String, dataLayerName: String)

# DataSource management
GET           /datasets                                                                                                                     @com.scalableminds.webknossos.datastore.controllers.DataSourceController.testChunk(resumableChunkNumber: Int, resumableIdentifier: String)
POST          /datasets                                                                                                                     @com.scalableminds.webknossos.datastore.controllers.DataSourceController.uploadChunk()
GET           /datasets/getUnfinishedUploads                                                                                                @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getUnfinishedUploads(organizationName: String)
POST          /datasets/reserveUpload                                                                                                       @com.scalableminds.webknossos.datastore.controllers.DataSourceController.reserveUpload()
POST          /datasets/reserveManualUpload                                                                                                 @com.scalableminds.webknossos.datastore.controllers.DataSourceController.reserveManualUpload()
POST          /datasets/finishUpload                                                                                                        @com.scalableminds.webknossos.datastore.controllers.DataSourceController.finishUpload()
POST          /datasets/cancelUpload                                                                                                        @com.scalableminds.webknossos.datastore.controllers.DataSourceController.cancelUpload()
GET           /datasets/measureUsedStorage/:organizationId                                                                                  @com.scalableminds.webknossos.datastore.controllers.DataSourceController.measureUsedStorage(organizationId: String, datasetName: Option[String])
GET           /datasets/:organizationId/:datasetName/readInboxDataSource                                                                    @com.scalableminds.webknossos.datastore.controllers.DataSourceController.readInboxDataSource(organizationId: String, datasetName: String)
POST          /datasets/:organizationId/:datasetName                                                                                        @com.scalableminds.webknossos.datastore.controllers.DataSourceController.update(organizationId: String, datasetName: String)
PUT           /datasets/:organizationId/:datasetName                                                                                        @com.scalableminds.webknossos.datastore.controllers.DataSourceController.add(organizationId: String, datasetName: String, folderId: Option[String])
DELETE        /datasets/:organizationId/:datasetName/deleteOnDisk                                                                           @com.scalableminds.webknossos.datastore.controllers.DataSourceController.deleteOnDisk(organizationId: String, datasetName: String)
POST          /datasets/compose                                                                                                             @com.scalableminds.webknossos.datastore.controllers.DataSourceController.compose()
POST          /datasets/exploreRemote                                                                                                       @com.scalableminds.webknossos.datastore.controllers.DataSourceController.exploreRemoteDataset()

# Actions
POST          /triggers/checkInboxBlocking                                                                                                  @com.scalableminds.webknossos.datastore.controllers.DataSourceController.triggerInboxCheckBlocking()
POST          /triggers/createOrganizationDirectory                                                                                         @com.scalableminds.webknossos.datastore.controllers.DataSourceController.createOrganizationDirectory(organizationId: String)
POST          /triggers/reload/:organizationId/:datasetName                                                                                 @com.scalableminds.webknossos.datastore.controllers.DataSourceController.reload(organizationId: String, datasetName: String, layerName: Option[String])

# Exports
GET           /exports/:jobId/download                                                                                                      @com.scalableminds.webknossos.datastore.controllers.ExportsController.download(jobId: String)
