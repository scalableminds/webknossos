http {
  uri = "http://localhost:9000"
  port = 9000
}

play {
  modules {
    enabled += "WebknossosModule"
    enabled += "SilhouetteModule"
    enabled += "com.scalableminds.webknossos.datastore.DataStoreModule"
    enabled += "com.scalableminds.webknossos.tracingstore.TracingStoreModule"
  }
  http {
    secret.key = "$JUeGY5yhw~pw%`pyVeDF*}`sF^kL'@sF$=dSTx?<z*f/vFg"
    parser {
      maxMemoryBuffer = 250M
      maxDiskBuffer = 1G
    }
    fileMimeTypes = ${play.http.fileMimeTypes} """
      wasm=application/wasm
    """
  }

  filters {
    # Note that the CSP filter is not enabled. We manually add this header ourselves for the
    # main view, using the following config (note that currently only directives are used, not nonce or hashes)
    csp.directives {
      default-src = "'self'"
      # In production 'unsafe-inline' should be removed as it is only needed to make the React Dev Tools work in Firefox.
      # 'unsafe-eval' is needed because many libraries use some form of eval internally.
      # The sha256 hash refers to the google analytics configuration script in main.scala.html.
      script-src = "'self' 'unsafe-inline' 'unsafe-eval' *.googletagmanager.com app.olvy.co webknossos.olvy.co *.gstatic.com 'sha256-NA81o2FV8jh0UizSPsBz2qEGpXfap54Eghuo7vxrH8g='"
      # 'unsafe-inline' is needed, because the olvy script uses inline CSS.
      style-src = "'self' 'unsafe-inline' *.gstatic.com"
      # In production ws://localhost:9002 should be removed as it is only needed to make the webpack dev-server work.
      # api.github.com and gist.github.com are needed for the user script functionality.
      # All external datastore URLs need to be included here, for example: *.webknossos.org demo.data1-brain.esc.rzg.mpg.de
      # In addition, the host domain needs to be added as well, for example: *.webknossos.org
      connect-src = "'self' ws://localhost:9002 app.olvy.co api.github.com gist.github.com *.google-analytics.com api.airbrake.io"
      frame-src = "'self' webknossos.olvy.co"
      # *.voxelytics.com is needed for images embedded in Voxelytics reports.
      img-src = "'self' data: *.googletagmanager.com *.google-analytics.com *.voxelytics.com"
      media-src = "*.webknossos.org"
      font-src = "'self' data:"
    }
    enabled += "play.filters.headers.SecurityHeadersFilter"
    disabled += "play.filters.csrf.CSRFFilter"
    disabled += "play.filters.hosts.AllowedHostsFilter"
    headers {
      # Unset some of the security filters enabled in the default SecurityHeadersFilter
      contentTypeOptions = null
      frameOptions = null
      xssProtection = null # Not supported on modern browsers
    }
  }
  # Timeouts. Note that these take effect only in production mode (timeouts are shorter in dev)
  server {
    http.idleTimeout = 2 hours
    pekko.requestTimeout = 2 hours
  }
  assets {
    cache {
      /public/bundle = null # recommended for production: "public, max-age=31536000, immutable"
      /public/fonts = null # recommended for production: "public, max-age=604800"
      /public/images = null # recommended for production: "public, max-age=604800"
    }
  }
  ws {
    timeout.request = 2 hours
    timeout.idle = 2 hours
    timeout.connection = 2 hours
  }
}

pekko.actor.default-dispatcher {
  # We use a compromise for our thread pool configuration
  # Parts of our api are async, so they should not need many threads,
  # but some parts are also blocking (file io, gcs, s3 access), causing new requests
  # to wait despite idle cpu, if there are too few threads
  fork-join-executor {
    parallelism-factor = 5.0 # Thread count = ceil(available processors * factor)
    parallelism-min = 8 # Min number of threads to cap factor-based parallelism number to
    parallelism-max = 300 # Max number of threads to cap factor-based parallelism number to
  }
}

webKnossos {
  tabTitle = "WEBKNOSSOS"
  user {
    timeTrackingPause = 60 seconds
    inviteExpiry = 14 days
    ssoKey = ""
    emailVerification {
      activated = true
      required = false
      gracePeriod = 7 days # time period in which users do not need to verify their email address
      linkExpiry = 30 days
    }
  }
  tasks.maxOpenPerUser = 5
  newOrganizationMailingList = ""
  cache {
    user.timeout = 3 minutes
  }
  annotation.mutex.expiryTime = 2 minutes
  fetchUsedStorage {
    rescanInterval = 24 hours # do not scan organizations whose last scan is more recent than this
    tickerInterval = 10 minutes # scan some organizations at each tick
    scansPerTick = 10 # scan x organizations at each tick
  }
  sampleOrganization {
    enabled = true
    user {
      email = "sample@scm.io"
      email2 = "sample2@scm.io"
      password = "secret"
      token = "secretSampleUserToken"
      isSuperUser = true
    }
  }
  operatorData = """
    **This is a dev deployment**

    Please add the information of the operator to comply with GDPR.
  """
  termsOfService {
    enabled = false
    # The URL will be embedded into an iFrame
    url = "https://webknossos.org/terms-of-service"
    acceptanceDeadline = "2023-01-01T00:00:00Z"
    version = 1
  }
  securityTxt {
    enabled = true
    content ="""Contact: https://github.com/scalableminds/webknossos/security/advisories/new
Expires: 2024-07-03T10:00:00.000Z
Preferred-Languages: en,de
    """
  }
}

singleSignOn {
  openIdConnect {
      providerUrl = "http://localhost:8080/auth/realms/master/"
      clientId = "myclient"
      clientSecret = "myClientSecret"
      scope = "openid profile email"
      verboseLoggingEnabled = false # always set to false in production to avoid logging secrets
    }
}

# This part of the config is exposed as JSON via /api/features
features {
  discussionBoard = "https://forum.image.sc/tag/webknossos"
  discussionBoardRequiresAdmin = false
  hideNavbarLogin = false
  isWkorgInstance = false
  taskReopenAllowedInSeconds = 30
  allowDeleteDatasets = true
  # to enable jobs for local development, use "yarn enable-jobs" to also activate it in the database
  jobsEnabled = false
  voxelyticsEnabled = false
  # For new users, the dashboard will show a banner which encourages the user to check out the following dataset.
  # If isWkorgInstance == true, `/createExplorative/hybrid/true` is appended to the URL so that a new tracing is opened.
  # If isWkorgInstance == false, `/view` is appended to the URL so that it's opened in view mode (since the user might not
  # have an account).
  publicDemoDatasetUrl = "https://webknossos.org/datasets/scalable_minds/l4dense_motta_et_al_demo"
  exportTiffMaxVolumeMVx = 1024
  exportTiffMaxEdgeLengthVx = 8192
  defaultToLegacyBindings = false
  # The only valid item value is currently "ConnectomeView":
  optInTabs = []
  openIdConnectEnabled = false
  segmentAnythingEnabled = false
}

# Serve annotations. Only active if the corresponding play module is enabled
tracingstore {
  key = "something-secure"
  name = "localhost"
  publicUri = ${http.uri}
  webKnossos {
    uri = ${http.uri}
  }
  fossildb {
    address = "localhost"
    port = 7155
  }
  redis {
    address = "localhost"
    port = 6379
  }
}

# Serve image data. Only active if the corresponding play module is enabled
datastore {
  key = "something-secure"
  name = "localhost"
  publicUri = ${http.uri}
  webKnossos {
    uri = ${http.uri}
    pingInterval = 10 minutes
  }
  baseFolder = "binaryData"
  localFolderWhitelist = [] # list of local absolute directory paths where image data may be explored and served from
  watchFileSystem {
    enabled = true
    interval = 1 minute
    initialDelay = 5 seconds
  }
  reportUsedStorage.enabled = false
  cache {
    dataCube.maxEntries = 40
    mapping.maxEntries = 5
    imageArrayChunks.maxSizeBytes = 2000000000 # 2 GB
    agglomerateFile {
      maxFileHandleEntries = 15
      maxSegmentIdEntries = 625000
      blockSize = 512 # ideal value ~= file system block size / bytes per id
      cumsumMaxReaderRange = 1310720
    }
  }
  adHocMesh {
    timeout = 30 seconds
    actorPoolSize = 1
  }
  redis {
    address = "localhost"
    port = 6379
  }
  agglomerateSkeleton.maxEdges = 1000000
}

# Proxy some routes to prefix + route (only if features.isWkorgInstance, route "/" only if logged out)
proxy {
  prefix = ""
  routes = []
}

# Send emails to users and admins
mail {
  logToStdout = false # To protect privacy, always set to false in production
  smtp {
    host = ""
    port = 465
    tls = true
    auth = true
    user = ""
    pass = ""
  }
  defaultSender = "WEBKNOSSOS <no-reply@webknossos.org>"
  mailchimp {
    host = ""
    listId = ""
    user = ""
    password = ""
  }
}

# SQL Slick Database Connection Config in Subfile to provide it also to the AssetGeneration task
include "slick.conf"

# Authentication via cookies and tokens
silhouette {
  cookieAuthenticator {
    cookieName = "id"
    cookiePath = "/"
    secureCookie = false
    httpOnlyCookie = true
    useFingerprinting = true
    authenticatorExpiry = 30 days
    cookieMaxAge = 365 days
    signerSecret = "`?IVa2TCaZAZ4TY]B0=tCs9mJdyaA0V<mA4k[sq6gV=2C5y?liAhWF?ZMA0h1EIe"
  }

  tokenAuthenticator {
    authenticatorExpiry = 23000 days # must fit as seconds in 32bit signed int
    authenticatorIdleTimeout = 23000 days
    resetPasswordExpiry = 1 day
    dataStoreExpiry = 1 day
  }

  oauth1TokenSecretProvider {
    cookieName = "OAuth1TokenSecret"
    cookiePath = "/"
    secureCookie = false
    httpOnlyCookie = true
    expirationTime = 5 minutes
  }
}

# Execute long-running jobs
jobs {
  workerLivenessTimeout = 1 minute
}

# Automatically register users on braintracing.org
braintracing {
  enabled = false
  organizationName = "sample_organization" # only users signing up for this organization will be registered on braintracing
  uri = "http://braintracing.org/"
  createUserScript = "oxalis_create_user.php"
  user = ""
  password = ""
  license = ""
}

# Front-end analytics
airbrake {
  environment = "dev-local"
  projectKey = "insert-valid-projectKey-here"
  projectID = "insert-valid-projectID-here"
}

# Front-end analytics
googleAnalytics.trackingId = ""

# Back-end analytics
slackNotifications {
  uri = ""
  verboseLoggingEnabled = false # log all slack messages also to stdout
}

# Back-end analytics
backendAnalytics {
  uri = "https://events-relay.webknossos.org/events"
  uri = ${?DEV_WK_ANALYTICS_URI}
  key = ""
  sessionPause = 30 minutes
  saveToDatabaseEnabled = false
  verboseLoggingEnabled = false
  # Flat list of uri-key pairs in the format: uri|key.Example: "https://webknossos.org|secretKey".
  # If events have one of these URIs, they need to present a matching key.
  wellKnownUris = []
}

voxelytics {
  staleTimeout = 20 minutes
  loki {
    uri = ""
    startupTimeout = 1 minute
  }
}

segmentAnything {
  uri = "http://localhost:8080"
  user = "user"
  password = "password"
}

# Avoid creation of a pid file
pidfile.path = "/dev/null"


# uncomment these lines for faster restart during local backend development (but beware the then-missing features):
#slick.checkSchemaOnStartup = false
