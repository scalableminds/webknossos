version: 2
jobs:
  build_test_deploy:
    machine:
      image: ubuntu-2004:202111-02
      docker_layer_caching: true
    resource_class: large
    environment:
      USER_NAME: circleci
      USER_UID: 1000
      USER_GID: 1000
      TZ: Europe/Berlin
    steps:
      - checkout
      - run:
          name: "Custom environment variables"
          command: |
            if [ -n "$CIRCLE_BRANCH" ]; then
              NORMALIZED_BRANCH=${CIRCLE_BRANCH//[\/-]/_}
              echo "export NORMALIZED_BRANCH=${NORMALIZED_BRANCH}" >> $BASH_ENV
              echo "export DOCKER_TAG=${NORMALIZED_BRANCH}__${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            fi
            if [ -n "$CIRCLE_TAG" ]; then
              echo "export NORMALIZED_BRANCH=master" >> $BASH_ENV
              echo "export DOCKER_TAG=${CIRCLE_TAG}" >> $BASH_ENV
            fi
      - run:
          name: Build webknossos-dev docker image
          command: |
            docker pull scalableminds/webknossos-dev:$NORMALIZED_BRANCH || true
            DEV_CACHE=$NORMALIZED_BRANCH docker-compose build base
      - run:
          name: Prepare dependency folders
          command: mkdir -p project/target target ~/.ivy2 ~/.cache/coursier ~/.cache/yarn
      - restore_cache:
          name: Restore target cache
          keys:
            - target-cache-{{ checksum ".circleci/cache_version" }}-{{ .Branch }}
            - target-cache-{{ checksum ".circleci/cache_version" }}-master
      - restore_cache:
          name: Restore sbt cache
          keys:
            - sbt-cache-{{ checksum ".circleci/cache_version" }}-{{ checksum "project/Dependencies.scala" }}
            - sbt-cache-{{ checksum ".circleci/cache_version" }}-
      - restore_cache:
          name: Restore yarn cache
          keys:
            - yarn-cache-{{ checksum ".circleci/cache_version" }}-{{ checksum "yarn.lock" }}
            - yarn-cache-{{ checksum ".circleci/cache_version" }}-
      - run:
          name: Install frontend dependencies
          command: docker-compose run -e PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true base yarn install --frozen-lockfile
      - run:
          name: Assert unique evolution numbers
          command: docker-compose run base tools/postgres/dbtool.js assert-unique-evolution-numbers
      - restore_cache:
          name: Restore webpack cache
          keys:
            - webpack-cache-{{ checksum ".circleci/cache_version" }}-{{ .Branch }}
            - webpack-cache-{{ checksum ".circleci/cache_version" }}-master
      - run:
          name: Assert schema.sql and evolutions are equal
          command: |
            docker-compose up -d postgres
            sleep 3
            docker-compose run compile tools/postgres/dbtool.js check-evolutions-schema
      - run:
          name: Build frontend documentation
          command: docker-compose run base yarn run docs
      - run:
          name: Build webknossos (webpack)
          command: |
            docker-compose run base yarn build
      - run:
          name: Build webknossos (sbt)
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker-compose run compile sbt -no-colors clean compile stage
            else
              docker-compose run compile sbt -no-colors -DfailOnWarning compile stage
            fi
      - run:
          name: Build webknossos-datastore (sbt)
          command: docker-compose run base sbt -no-colors -DfailOnWarning "project webknossosDatastore" copyMessages compile stage

      - run:
          name: Build webknossos-tracingstore (sbt)
          command: docker-compose run base sbt -no-colors -DfailOnWarning "project webknossosTracingstore" copyMessages compile stage

      - save_cache:
          name: Save target cache
          key: target-cache-{{ checksum ".circleci/cache_version" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - "project/target"
            - "target"

      - save_cache:
          name: Save sbt cache
          key: sbt-cache-{{ checksum ".circleci/cache_version" }}-{{ checksum "project/Dependencies.scala" }}
          paths:
            - "~/.ivy2"
            - "~/.cache/coursier"

      - save_cache:
          name: Save yarn cache
          key: yarn-cache-{{ checksum ".circleci/cache_version" }}-{{ checksum "yarn.lock" }}
          paths:
            - "~/.cache/yarn"

      - save_cache:
          name: Save webpack cache
          key: webpack-cache-{{ checksum ".circleci/cache_version" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - "node_modules/.cache/webpack"

      - run:
          name: Build webknossos docker image
          command: docker-compose build --pull webknossos

      - run:
          name: Build webknossos-datastore docker image
          command: docker-compose build --pull webknossos-datastore

      - run:
          name: Build webknossos-tracingstore docker image
          command: docker-compose build --pull webknossos-tracingstore

      - run:
          name: Lint frontend code and check formatting
          command: |
            .circleci/not-on-master.sh docker-compose run base bash -c "yarn run check-frontend"
      - run:
          name: Check for cyclic dependencies in front-end
          command: |
            .circleci/not-on-master.sh docker-compose run base yarn check-cyclic-dependencies
      - run:
          name: Run frontend tests
          command: |
            .circleci/not-on-master.sh docker-compose run base yarn test-verbose
      - run:
          name: Lint backend code and check formatting
          command: |
            .circleci/not-on-master.sh docker-compose run backend-lint-format
      - run:
          name: Run backend tests
          command: |
            .circleci/not-on-master.sh docker-compose run backend-tests
      - run:
          name: Run end-to-end tests
          command: |
            for i in {1..3}; do # retry
              .circleci/not-on-master.sh docker-compose run e2e-tests && s=0 && break || s=$?
            done
            (exit $s)
      - run:
          name: Validate frontend types
          command: |
            .circleci/not-on-master.sh docker-compose run base yarn typecheck
      - run:
          name: Start webknossos
          background: true
          command: docker-compose up webknossos
      - run:
          name: Run webknossos smoke test
          command: |
            for i in {1..10}; do # retry
              sleep 10
              curl --fail -v http://localhost:9000/api/health && s=0 && break || s=$?
            done
            (exit $s)
      - run:
          name: Stop webknossos
          command: docker-compose down --volumes --remove-orphans

      - run:
          name: Start webknossos-datastore
          background: true
          command: docker-compose up webknossos-datastore
      - run:
          name: Run webknossos-datastore smoke test
          command: |
            for i in {1..10}; do # retry
              sleep 10
              curl --fail -v http://localhost:9090/data/health && s=0 && break || s=$?
            done
            (exit $s)
      - run:
          name: Stop webknossos-datastore
          command: docker-compose down --volumes --remove-orphans

      - run:
          name: Start webknossos-tracingstore
          background: true
          command: docker-compose up webknossos-tracingstore
      - run:
          name: Run webknossos-tracingstore smoke test
          command: |
            for i in {1..10}; do # retry
              sleep 10
              curl --fail -v http://localhost:9050/tracings/health && s=0 && break || s=$?
            done
            (exit $s)
      - run:
          name: Stop webknossos-tracingstore
          command: docker-compose down --volumes --remove-orphans

      - run:
          name: Push docker images
          command: |
            function retry() {
              for i in {1..5}; do
                "$@" && s=0 && break || s=$?
                sleep 10
              done
              return $s
            }
            retry sh -c 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
            retry docker-compose push webknossos
            retry docker-compose push webknossos-datastore
            retry docker-compose push webknossos-tracingstore
            if [ -n "$CIRCLE_BRANCH" ]; then
              docker tag \
                scalableminds/webknossos:${DOCKER_TAG} \
                scalableminds/webknossos:${NORMALIZED_BRANCH}
              retry docker push scalableminds/webknossos:${NORMALIZED_BRANCH}
              docker tag \
                scalableminds/webknossos-datastore:${DOCKER_TAG} \
                scalableminds/webknossos-datastore:${NORMALIZED_BRANCH}
              retry docker push scalableminds/webknossos-datastore:${NORMALIZED_BRANCH}
              docker tag \
                scalableminds/webknossos-tracingstore:${DOCKER_TAG} \
                scalableminds/webknossos-tracingstore:${NORMALIZED_BRANCH}
              retry docker push scalableminds/webknossos-tracingstore:${NORMALIZED_BRANCH}
              docker tag \
                scalableminds/webknossos-dev \
                scalableminds/webknossos-dev:${NORMALIZED_BRANCH}
              retry docker push scalableminds/webknossos-dev:${NORMALIZED_BRANCH}
            fi
            docker logout
      - run:
          name: Report coverage
          command: .circleci/not-on-master.sh docker-compose run base yarn coverage || true
      - run:
          name: Send Slack notification (master only)
          command: .circleci/slack-notification.sh

  nightly:
    docker:
      - image: scalableminds/puppeteer:master
    resource_class: large
    steps:
      - checkout
      - run:
          name: Remove dev-deployment
          command: >
            curl
            -X POST
            -H "X-Auth-Token: $RELEASE_API_TOKEN"
            https://kubernetix.scm.io/hooks/remove/webknossos/dev/master?user=CI+%28nightly%29
      - run:
          name: Wait 3min
          command: sleep 180
      - run:
          name: Install dev-deployment
          command: >
            curl
            -X POST
            -H "X-Auth-Token: $RELEASE_API_TOKEN"
            https://kubernetix.scm.io/hooks/install/webknossos/dev/master?user=CI+%28nightly%29
      - run:
          name: Install dependencies and sleep at least 3min
          command: |
            yarn install --frozen-lockfile &
            sleep 180 &
            wait
      - run:
          name: Refresh datasets
          command: curl -X POST --fail https://master.webknossos.xyz/data/triggers/checkInboxBlocking?token=$WK_AUTH_TOKEN
      - run:
          name: Run screenshot-tests
          command: |
            # CircleCI cancels the job after 60 minutes. To ensure that screenshots are still
            # uploaded as artifacts, we define a timeout of 50 minutes for the screenshot tests.
            URL=https://master.webknossos.xyz/ \
            timeout 3000 \
            yarn test-screenshot

      - store_artifacts:
          path: frontend/javascripts/test/screenshots

      - store_artifacts:
          path: frontend/javascripts/test/snapshots/type-check

  wkorg_nightly:
    docker:
      - image: scalableminds/puppeteer:master
    resource_class: large
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yarn install --frozen-lockfile
      - run:
          name: Run screenshot-tests
          command: |
            # CircleCI cancels the job after 60 minutes. To ensure that screenshots are still
            # uploaded as artifacts, we define a timeout of 50 minutes for the screenshot tests.
            timeout 3000 \
            yarn test-wkorg-screenshot

      - store_artifacts:
          path: frontend/javascripts/test/screenshots-wkorg

workflows:
  version: 2
  circleci_build:
    jobs:
      - build_test_deploy:
          context:
            - DockerHub
          filters:
            tags:
              only: /.*/
  circleci_nightly:
    jobs:
      - nightly
    triggers:
      - schedule:
          # 02:15 AM UTC
          cron: "15 2 * * *"
          filters:
            branches:
              only:
                - master
  circleci_wkorg_nightly:
    jobs:
      - wkorg_nightly
    triggers:
      - schedule:
          # 03:15 AM UTC
          cron: "15 3 * * *"
          filters:
            branches:
              only:
                - master
