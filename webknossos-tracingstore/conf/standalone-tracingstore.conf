http {
  uri = "http://localhost:9050"
  port = 9050
}

play {
  modules.enabled += "com.scalableminds.webknossos.tracingstore.TracingStoreModule"
  http {
    requestHandler = "TsRequestHandler"
    secret.key = "/tfger=?!359=(623de35]/3eg>34>r9/of/45gh654>?!654g/5f4//hbfw245<"
    parser {
      maxMemoryBuffer = 250M
      maxDiskBuffer = 1G
    }
  }
  filters {
    enabled += "play.filters.headers.SecurityHeadersFilter"
    disabled += "play.filters.csrf.CSRFFilter"
    disabled += "play.filters.hosts.AllowedHostsFilter"
    headers {
      # Unset some of the security filters enabled in the default SecurityHeadersFilter
      contentSecurityPolicy = null
      contentTypeOptions = null
    }
  }
  server {
    # Timeouts. Note that these take effect only in production mode (timeouts are shorter in dev)
    http.idleTimeout = 10000s
    pekko.requestTimeout = 10000s
  }
  ws {
    timeout.request = 2 hours
    timeout.idle = 2 hours
    timeout.connection = 2 hours
  }
}

pekko.actor.default-dispatcher {
  # We use a compromise for our thread pool configuration
  # Parts of our api are async, so they should not need many threads,
  # but some parts are also blocking (file io, gcs, s3 access), causing new requests
  # to wait despite idle cpu, if there are too few threads
  fork-join-executor {
    parallelism-factor = 5.0 # Thread count = ceil(available processors * factor)
    parallelism-min = 8 # Min number of threads to cap factor-based parallelism number to
    parallelism-max = 300 # Max number of threads to cap factor-based parallelism number to
  }
}

tracingstore {
  key = "something-secur3"
  name = "standalone-9050"
  webKnossos {
    uri = "http://localhost:9000"
  }
  fossildb {
    address = "localhost"
    port = 7155
  }
  redis {
    address = "localhost"
    port = 6379
  }
}

slackNotifications {
  uri = ""
  verboseLoggingEnabled = false # log all slack messages also to stdout
}

pidfile.path = "/dev/null" # Avoid the creation of a pid file
