# Datastore Routes (Higher priority routes first)


# Health endpoint
GET           /health                                                                                                                         @com.scalableminds.webknossos.datastore.controllers.Application.health

# Read image data
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/data                                                             @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestViaWebknossos(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/readData                                                         @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestRawCuboidPost(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/data                                                             @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestRawCuboid(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, x: Int, y: Int, z: Int, width: Int, height: Int, depth: Int, mag: String, halfByte: Boolean ?= false, mappingName: Option[String])
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/thumbnail.jpg                                                    @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.thumbnailJpeg(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, x: Int, y: Int, z: Int, width: Int, height: Int, mag: String, mappingName: Option[String], intensityMin: Option[Double], intensityMax: Option[Double], color: Option[String], invertColor: Option[Boolean])
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/findData                                                         @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.findData(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/histogram                                                        @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.histogram(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)

# Knossos compatible routes
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/mag:resolution/x:x/y:y/z:z/bucket.raw                            @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestViaKnossos(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, resolution: Int, x: Int, y: Int, z: Int, cubeSize: Int)

# Zarr compatible routes
GET           /zarr/:organizationName/:datasetName                                                                                            @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataSourceFolderContents(token: Option[String], organizationName: String, datasetName: String)
GET           /zarr/:organizationName/:datasetName/                                                                                           @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataSourceFolderContents(token: Option[String], organizationName: String, datasetName: String)
GET           /zarr/:organizationName/:datasetName/.zgroup                                                                                    @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestZGroup(token: Option[String], organizationName: String, datasetName: String, dataLayerName="")
GET           /zarr/:organizationName/:datasetName/datasource-properties.json                                                                 @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataSource(token: Option[String], organizationName: String, datasetName: String)
GET           /zarr/:organizationName/:datasetName/:dataLayerName                                                                             @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerFolderContents(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
GET           /zarr/:organizationName/:datasetName/:dataLayerName/                                                                            @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerFolderContents(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
GET           /zarr/:organizationName/:datasetName/:dataLayerName/.zattrs                                                                     @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestZAttrs(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
GET           /zarr/:organizationName/:datasetName/:dataLayerName/.zgroup                                                                     @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestZGroup(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
GET           /zarr/:organizationName/:datasetName/:dataLayerName/:mag                                                                        @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerMagFolderContents(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, mag: String)
GET           /zarr/:organizationName/:datasetName/:dataLayerName/:mag/                                                                       @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestDataLayerMagFolderContents(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, mag: String)
GET           /zarr/:organizationName/:datasetName/:dataLayerName/:mag/.zarray                                                                @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestZArray(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, mag: String)
GET           /zarr/:organizationName/:datasetName/:dataLayerName/:mag/:cxyz                                                                  @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.requestRawZarrCube(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, mag: String, cxyz: String)

GET           /annotations/zarr/:accessTokenOrId                                                                                              @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceFolderContentsPrivateLink(token: Option[String], accessTokenOrId: String)
GET           /annotations/zarr/:accessTokenOrId/                                                                                             @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceFolderContentsPrivateLink(token: Option[String], accessTokenOrId: String)
GET           /annotations/zarr/:accessTokenOrId/.zgroup                                                                                      @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zGroupPrivateLink(token: Option[String], accessTokenOrId: String,  dataLayerName="")
GET           /annotations/zarr/:accessTokenOrId/datasource-properties.json                                                                   @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceWithAnnotationPrivateLink(token: Option[String], accessTokenOrId: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName                                                                               @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerFolderContentsPrivateLink(token: Option[String], accessTokenOrId: String,  dataLayerName: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/                                                                              @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerFolderContentsPrivateLink(token: Option[String], accessTokenOrId: String,  dataLayerName: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/.zattrs                                                                       @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zAttrsWithAnnotationPrivateLink(token: Option[String], accessTokenOrId: String, dataLayerName: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/.zgroup                                                                       @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zGroupPrivateLink(token: Option[String], accessTokenOrId: String,  dataLayerName: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/:mag                                                                          @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerMagFolderContentsPrivateLink(token: Option[String], accessTokenOrId: String,  dataLayerName: String, mag: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/:mag/                                                                         @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerMagFolderContentsPrivateLink(token: Option[String], accessTokenOrId: String,  dataLayerName: String, mag: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/:mag/.zarray                                                                  @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zArrayPrivateLink(token: Option[String], accessTokenOrId: String, dataLayerName: String, mag: String)
GET           /annotations/zarr/:accessTokenOrId/:dataLayerName/:mag/:cxyz                                                                    @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.rawZarrCubePrivateLink(token: Option[String], accessTokenOrId: String, dataLayerName: String, mag: String, cxyz: String)

# Segmentation mappings
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/mappings/:mappingName                                            @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.mappingJson(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, mappingName: String)
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/mappings                                                         @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listMappings(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)

# Agglomerate files
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/agglomerates                                                     @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listAgglomerates(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/agglomerates/:mappingName/skeleton/:agglomerateId                @com.scalableminds.webknossos.datastore.controllers.DataSourceController.generateAgglomerateSkeleton(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, mappingName: String, agglomerateId: Long)
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/agglomerates/:mappingName/agglomerateGraph/:agglomerateId        @com.scalableminds.webknossos.datastore.controllers.DataSourceController.agglomerateGraph(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, mappingName: String, agglomerateId: Long)
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/agglomerates/:mappingName/largestAgglomerateId                   @com.scalableminds.webknossos.datastore.controllers.DataSourceController.largestAgglomerateId(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, mappingName: String)
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/agglomerates/:mappingName/agglomeratesForSegments                @com.scalableminds.webknossos.datastore.controllers.DataSourceController.agglomerateIdsForSegmentIds(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, mappingName: String)


# Mesh files
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/meshes                                                           @com.scalableminds.webknossos.datastore.controllers.DSMeshController.listMeshFiles(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/meshes/chunks                                                    @com.scalableminds.webknossos.datastore.controllers.DSMeshController.listMeshChunksForSegment(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, targetMappingName: Option[String], editableMappingTracingId: Option[String])
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/meshes/chunks/data                                               @com.scalableminds.webknossos.datastore.controllers.DSMeshController.readMeshChunk(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/meshes/fullMesh.stl                                              @com.scalableminds.webknossos.datastore.controllers.DSMeshController.loadFullMeshStl(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)

# Connectome files
GET           /datasets/:organizationName/:datasetName/layers/:dataLayerName/connectomes                                                      @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listConnectomeFiles(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/connectomes/synapses/positions                                   @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapsePositions(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/connectomes/synapses/types                                       @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapseTypes(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/connectomes/synapses/:direction                                  @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapticPartnerForSynapses(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String, direction: String)
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/connectomes/synapses                                             @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapsesForAgglomerates(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)

# Ad-Hoc Meshing
POST          /datasets/:organizationName/:datasetName/layers/:dataLayerName/adHocMesh                                                        @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestAdHocMesh(token: Option[String], organizationName: String, datasetName: String, dataLayerName: String)

# Segment-Index files
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/hasSegmentIndex                                                  @com.scalableminds.webknossos.datastore.controllers.DataSourceController.checkSegmentIndexFile(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/segmentIndex                                                     @com.scalableminds.webknossos.datastore.controllers.DataSourceController.querySegmentIndex(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/segmentIndex/:segmentId                                          @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSegmentIndex(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, segmentId: String)
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/segmentStatistics/volume                                         @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSegmentVolume(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/segmentStatistics/boundingBox                                    @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSegmentBoundingBox(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)

# DataSource management
POST          /datasets                                                                                                                       @com.scalableminds.webknossos.datastore.controllers.DataSourceController.uploadChunk(token: Option[String])
POST          /datasets/reserveUpload                                                                                                         @com.scalableminds.webknossos.datastore.controllers.DataSourceController.reserveUpload(token: Option[String])
POST          /datasets/finishUpload                                                                                                          @com.scalableminds.webknossos.datastore.controllers.DataSourceController.finishUpload(token: Option[String])
POST          /datasets/cancelUpload                                                                                                          @com.scalableminds.webknossos.datastore.controllers.DataSourceController.cancelUpload(token: Option[String])
GET           /datasets/measureUsedStorage/:organizationName                                                                                  @com.scalableminds.webknossos.datastore.controllers.DataSourceController.measureUsedStorage(token: Option[String], organizationName: String, datasetName: Option[String])
GET           /datasets/:organizationName/:datasetName/readInboxDataSourceLike                                                                @com.scalableminds.webknossos.datastore.controllers.DataSourceController.read(token: Option[String], organizationName: String, datasetName: String, returnFormatLike: Boolean ?= true)
GET           /datasets/:organizationName/:datasetName/readInboxDataSource                                                                    @com.scalableminds.webknossos.datastore.controllers.DataSourceController.read(token: Option[String], organizationName: String, datasetName: String, returnFormatLike: Boolean ?= false)
POST          /datasets/:organizationName/:datasetName                                                                                        @com.scalableminds.webknossos.datastore.controllers.DataSourceController.update(token: Option[String], organizationName: String, datasetName: String)
PUT           /datasets/:organizationName/:datasetName                                                                                        @com.scalableminds.webknossos.datastore.controllers.DataSourceController.add(token: Option[String], organizationName: String, datasetName: String, folderId: Option[String])
GET           /datasets/:organizationName/:datasetName                                                                                        @com.scalableminds.webknossos.datastore.controllers.DataSourceController.suggestDatasourceJson(token: Option[String], organizationName: String, datasetName: String)
DELETE        /datasets/:organizationName/:datasetName/deleteOnDisk                                                                           @com.scalableminds.webknossos.datastore.controllers.DataSourceController.deleteOnDisk(token: Option[String], organizationName: String, datasetName: String)
POST          /datasets/compose                                                                                                               @com.scalableminds.webknossos.datastore.controllers.DataSourceController.compose(token: Option[String])

# Actions
POST          /triggers/checkInboxBlocking                                                                                                    @com.scalableminds.webknossos.datastore.controllers.DataSourceController.triggerInboxCheckBlocking(token: Option[String])
POST          /triggers/createOrganizationDirectory                                                                                           @com.scalableminds.webknossos.datastore.controllers.DataSourceController.createOrganizationDirectory(token: Option[String], organizationName: String)
POST          /triggers/reload/:organizationName/:datasetName                                                                                 @com.scalableminds.webknossos.datastore.controllers.DataSourceController.reload(token: Option[String], organizationName: String, datasetName: String, layerName: Option[String])

# Exports
GET           /exports/:jobId/download                                                                                                        @com.scalableminds.webknossos.datastore.controllers.ExportsController.download(token: Option[String], jobId: String)
