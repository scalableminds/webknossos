// @flow

import { type Channel, type Effect, type Pattern, type Task, type Saga as _Saga, channel, effects } from "redux-saga";
import {
  all as typedAll,
  race as typedRace,
  take as typedTake,
  call as typedCall,
  delay as typedDelay,
  takeEvery as typedTakeEvery,
  takeLeading as typedTakeLeading,
  throttle as typedThrottle,
  cancel as typedCancel,
} from "redux-saga/effects";

import type { Action } from "oxalis/model/actions/actions";
import type { OxalisState } from "oxalis/store";

declare type Context = Object;

// We disable function spreads, as it weakens the typechecks (wrong parameter
// won't be noticed count)
// declare type FnSpread<T, R> = (...args: Array<T>) => Promise<R> | R;

declare type Fn0<R> = () => Promise<R> | Generator<*, R, *> | R;
declare type Fn1<T1, R> = (t1: T1) => Promise<R> | Generator<*, R, *> | R;
declare type Fn2<T1, T2, R> = (t1: T1, t2: T2) => Promise<R> | Generator<*, R, *> | R;
declare type Fn3<T1, T2, T3, R> = (t1: T1, t2: T2, t3: T3) => Promise<R> | Generator<*, R, *> | R;
declare type Fn4<T1, T2, T3, T4, R> = (t1: T1, t2: T2, t3: T3, t4: T4) => Promise<R> | Generator<*, R, *> | R;
declare type Fn5<T1, T2, T3, T4, T5, R> = (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5) => Promise<R> | Generator<*, R, *> | R;
declare type Fn6<T1, T2, T3, T4, T5, T6, R> = (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6) => Promise<R> | Generator<*, R, *> | R;
declare type Fn7<T1, T2, T3, T4, T5, T6, T7, R> = (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7) => Promise<R> | Generator<*, R, *> | R;

/* ------------------ SELECT Stuff ------------------ */

// declare type SelectFnSpread<T, R> = (state: OxalisState, ...args: Array<T>) => R;
declare type SelectFn0<R> = (state: OxalisState) => R;
declare type SelectFn1<T1, R> = (state: OxalisState, t1: T1) => R;
declare type SelectFn2<T1, T2, R> = (state: OxalisState, t1: T1, t2: T2) => R;
declare type SelectFn3<T1, T2, T3, R> = (state: OxalisState, t1: T1, t2: T2, t3: T3) => R;
declare type SelectFn4<T1, T2, T3, T4, R> = (state: OxalisState, t1: T1, t2: T2, t3: T3, t4: T4) => R;
declare type SelectFn5<T1, T2, T3, T4, T5, R> = (state: OxalisState, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5) => R;
declare type SelectFn6<T1, T2, T3, T4, T5, T6, R> = (state: OxalisState, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6) => R;

declare type SelectFn = <R, Fn: SelectFn0<R>>(selector: Fn, ...rest: Array<void>) => Generator<*, R, *>;
// We are only using SelectFn0 and the others lead to flow errors
// & (<T1, R, Fn: SelectFn1<T1, R>>(selector: Fn, t1: T1, ...rest: Array<void>) => Generator<*, R, *>)
// & (<T1, T2, R, Fn: SelectFn2<T1, T2, R>>(selector: Fn, t1: T1, t2: T2, ...rest: Array<void>) => Generator<*, R, *>)
// & (<T1, T2, T3, R, Fn: SelectFn3<T1, T2, T3, R>>(selector: Fn, t1: T1, t2: T2, t3: T3, ...rest: Array<void>) => Generator<*, R, *>)
// & (<T1, T2, T3, T4, R, Fn: SelectFn4<T1, T2, T3, T4, R>>(selector: Fn, t1: T1, t2: T2, t3: T3, t4: T4, ...rest: Array<void>) => Generator<*, R, *>)
// & (<T1, T2, T3, T4, T5, R, Fn: SelectFn5<T1, T2, T3, T4, T5, R>>(selector: Fn, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, ...rest: Array<void>) => Generator<*, R, *>)
// & (<T1, T2, T3, T4, T5, T6, R, Fn: SelectFn6<T1, T2, T3, T4, T5, T6, R>>(selector: Fn, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, ...rest: Array<void>) => Generator<*, R, *>)
// & (<T, R, Fn: SelectFnSpread<T, R>>(selector: Fn, t1: T, t2: T, t3: T, t4: T, t5: T, t6: T, ...rest: Array<T>) => Generator<*, R, *>)

/* ------------------ CALL Stuff ------------------ */

declare type ContextCallFn = (<R, C: Context, Fn: Fn0<R>>(cfn: [C, Fn], ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, R, C: Context, Fn: Fn1<T1, R>>(cfn: [C, Fn], t1: T1, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, R, C: Context, Fn: Fn2<T1, T2, R>>(cfn: [C, Fn], t1: T1, t2: T2, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, R, C: Context, Fn: Fn3<T1, T2, T3, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, R, C: Context, Fn: Fn4<T1, T2, T3, T4, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, t4: T4, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, T5, R, C: Context, Fn: Fn5<T1, T2, T3, T4, T5, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, T5, T6, R, C: Context, Fn: Fn6<T1, T2, T3, T4, T5, T6, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, T5, T6, T7, R, C: Context, Fn: Fn7<T1, T2, T3, T4, T5, T6, T7, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, ...rest: Array<void>) => Generator<*, R, *>);
// & (<T, R, C: Context, Fn: FnSpread<T, R>>(cfn: [C, Fn], t1: T, t2: T, t3: T, t4: T, t5: T, t6: T, ...args: Array<T>) => Generator<*, R, *>);

declare type CallFn = ContextCallFn &
  (<T1, R, Fn: Fn1<T1, R>>(fn: Fn, t1: T1) => Generator<*, R, *>) &
  (<R, Fn: Fn0<R>>(fn: Fn) => Generator<*, R, *>) &
  (<T1, T2, R, Fn: Fn2<T1, T2, R>>(fn: Fn, t1: T1, t2: T2) => Generator<*, R, *>) &
  (<T1, T2, T3, R, Fn: Fn3<T1, T2, T3, R>>(fn: Fn, t1: T1, t2: T2, t3: T3) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, R, Fn: Fn4<T1, T2, T3, T4, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, t4: T4) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, T5, R, Fn: Fn5<T1, T2, T3, T4, T5, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, T5, T6, R, Fn: Fn6<T1, T2, T3, T4, T5, T6, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, T5, T6, T7, R, Fn: Fn7<T1, T2, T3, T4, T5, T6, T7, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7) => Generator<*, R, *>);
// & (<T, R, Fn: FnSpread<T, R>>(fn: Fn, ...args: Array<T>) => Generator<*, R, *>);

/* ------------------ CPS Stuff ------------------ */

declare type CallbackFn<R> = (error: any, ret: R) => void;

// declare type CpsFnSpread<T, R> = (cb: CallbackFn<R>, ...args: Array<T>) => any;
declare type CpsFn0<R> = (cb: CallbackFn<R>) => any;
declare type CpsFn1<T1, R> = (t1: T1, CallbackFn<R>) => any;
declare type CpsFn2<T1, T2, R> = (t1: T1, t2: T2, cb: CallbackFn<R>) => any;
declare type CpsFn3<T1, T2, T3, R> = (t1: T1, t2: T2, t3: T3, cb: CallbackFn<R>) => any;
declare type CpsFn4<T1, T2, T3, T4, R> = (t1: T1, t2: T2, t3: T3, t4: T4, cb: CallbackFn<R>) => any;
declare type CpsFn5<T1, T2, T3, T4, T5, R> = (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, cb: CallbackFn<R>) => any;
declare type CpsFn6<T1, T2, T3, T4, T5, T6, R> = (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, cb: CallbackFn<R>) => any;

declare type ContextCpsFn = (<R, C: Context, Fn: CpsFn0<R>>(cfn: [C, Fn], ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, R, C: Context, Fn: CpsFn1<T1, R>>(cfn: [C, Fn], t1: T1, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, R, C: Context, Fn: CpsFn2<T1, T2, R>>(cfn: [C, Fn], t1: T1, t2: T2, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, R, C: Context, Fn: CpsFn3<T1, T2, T3, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, R, C: Context, Fn: CpsFn4<T1, T2, T3, T4, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, t4: T4, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, T5, R, C: Context, Fn: CpsFn5<T1, T2, T3, T4, T5, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, T5, T6, R, C: Context, Fn: CpsFn6<T1, T2, T3, T4, T5, T6, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, ...rest: Array<void>) => Generator<*, R, *>);
// & (<T, R, C: Context, Fn: CpsFnSpread<T, R>>(cfn: [C, Fn], t1: T, t2: T, t3: T, t4: T, t5: T, t6: T, ...args: Array<T>) => Generator<*, R, *>);

declare type CpsFn = ContextCpsFn &
  (<R, Fn: CpsFn0<R>>(fn: Fn, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, R, Fn: CpsFn1<T1, R>>(fn: Fn, t1: T1, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, R, Fn: CpsFn2<T1, T2, R>>(fn: Fn, t1: T1, t2: T2, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, R, Fn: CpsFn3<T1, T2, T3, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, R, Fn: CpsFn4<T1, T2, T3, T4, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, t4: T4, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, T5, R, Fn: CpsFn5<T1, T2, T3, T4, T5, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, ...rest: Array<void>) => Generator<*, R, *>) &
  (<T1, T2, T3, T4, T5, T6, R, Fn: CpsFn6<T1, T2, T3, T4, T5, T6, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, ...rest: Array<void>) => Generator<*, R, *>);
// & (<T, R, Fn: CpsFnSpread<T, R>>(fn: Fn, ...args: Array<T>) => Generator<*, R, *>);

/* ------------------ FORK Stuff ------------------ */

declare type ContextForkFn = (<R, C: Context, Fn: Fn0<R>>(cfn: [C, Fn], ...rest: Array<void>) => Generator<*, Task<R>, *>) &
  (<T1, R, C: Context, Fn: Fn1<T1, R>>(cfn: [C, Fn], t1: T1, ...rest: Array<void>) => Generator<*, Task<R>, *>) &
  (<T1, T2, R, C: Context, Fn: Fn2<T1, T2, R>>(cfn: [C, Fn], t1: T1, t2: T2, ...rest: Array<void>) => Generator<*, Task<R>, *>) &
  (<T1, T2, T3, R, C: Context, Fn: Fn3<T1, T2, T3, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, ...rest: Array<void>) => Generator<*, Task<R>, *>) &
  (<T1, T2, T3, T4, R, C: Context, Fn: Fn4<T1, T2, T3, T4, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, t4: T4, ...rest: Array<void>) => Generator<*, Task<R>, *>) &
  (<T1, T2, T3, T4, T5, R, C: Context, Fn: Fn5<T1, T2, T3, T4, T5, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, ...rest: Array<void>) => Generator<*, Task<R>, *>) &
  (<T1, T2, T3, T4, T5, T6, R, C: Context, Fn: Fn6<T1, T2, T3, T4, T5, T6, R>>(cfn: [C, Fn], t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, ...rest: Array<void>) => Generator<*, Task<R>, *>);
// & (<T, R, C: Context, Fn: FnSpread<T, R>>(cfn: [C, Fn], t1: T, t2: T, t3: T, t4: T, t5: T, t6: T, ...args: Array<T>) => Generator<*, Task<R>, *>);

declare type ForkFn = ContextForkFn &
  (<R, Fn: Fn0<R>>(fn: Fn) => Generator<*, Task<R>, *>) &
  (<T1, R, Fn: Fn1<T1, R>>(fn: Fn, t1: T1) => Generator<*, Task<R>, *>) &
  (<T1, T2, R, Fn: Fn2<T1, T2, R>>(fn: Fn, t1: T1, t2: T2) => Generator<*, Task<R>, *>) &
  (<T1, T2, T3, R, Fn: Fn3<T1, T2, T3, R>>(fn: Fn, t1: T1, t2: T2, t3: T3) => Generator<*, Task<R>, *>) &
  (<T1, T2, T3, T4, R, Fn: Fn4<T1, T2, T3, T4, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, t4: T4) => Generator<*, Task<R>, *>) &
  (<T1, T2, T3, T4, T5, R, Fn: Fn5<T1, T2, T3, T4, T5, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5) => Generator<*, Task<R>, *>) &
  (<T1, T2, T3, T4, T5, T6, R, Fn: Fn6<T1, T2, T3, T4, T5, T6, R>>(fn: Fn, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6) => Generator<*, Task<R>, *>);
// & (<T, R, Fn: FnSpread<T, R>>(fn: Fn, ...args: Array<T>) => Generator<*, R, *>);

/* ------------------ Effects without return types ------------------ */

declare type PutFn = {
  <T: Action>(action: T): Generator<*, void, *>,
  <T: Action>(channel: Channel<T>, action: T): Generator<*, void, *>,
};

type ExtractReturnType = <R>((...args: any) => R) => R;
type ReturnType<Fn> = $Call<ExtractReturnType, Fn>;

declare type CancelledFn = () => Generator<*, boolean, *>;
declare type TakeFn = <P: Pattern>(pattern: P) => Generator<*, Action, *>;
declare type RaceFnTest = (...args: any) => Generator<*, ReturnType<typeof typedRace>, *>;

declare type RaceFn = <R: { +[name: string]: Effect }>(effects: R) => Generator<*, { +[name: $Keys<R>]: ?Action }, *>;

declare type JoinFn = <T: Task<*> | Array<Task<*>>>(tasks: T) => Generator<*, T, *>;

declare export var select: SelectFn;
declare export var call: CallFn;
declare export var put: PutFn;
declare export var cps: CpsFn;
declare export var fork: ForkFn;
declare export var cancelled: CancelledFn;
declare export var take: TakeFn;
declare export var race: RaceFn;
declare export var join: JoinFn;

// Export the original saga function prefixed with a _
declare export var _all: typeof typedAll;
declare export var _take: typeof typedTake;
declare export var _call: typeof typedCall;
declare export var _takeEvery: typeof typedTakeEvery;
declare export var _takeLeading: typeof typedTakeLeading;
declare export var _throttle: typeof typedThrottle;
declare export var _cancel: typeof typedCancel;
declare export var _delay: typeof typedDelay;
export type Saga<T> = _Saga<T>;
