# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
GET           /buildinfo                                                                        controllers.Application.buildInfo
GET           /features                                                                         controllers.Application.features
GET           /health                                                                           controllers.Application.health
POST          /analytics/:eventType                                                             controllers.Application.trackAnalyticsEvent(eventType)
POST          /helpEmail                                                                        controllers.Application.helpEmail(message: String, currentUrl: String)
POST          /triggers/initialData                                                             controllers.InitialDataController.triggerInsert
GET           /maintenance                                                                      controllers.MaintenanceController.info
POST          /maintenance                                                                      controllers.MaintenanceController.initMaintenance
DELETE        /maintenance                                                                      controllers.MaintenanceController.closeMaintenance

# Authentication
POST          /auth/register                                                                    controllers.AuthenticationController.register
POST          /auth/joinOrganization/:inviteToken                                               controllers.AuthenticationController.joinOrganization(inviteToken: String)
POST          /auth/login                                                                       controllers.AuthenticationController.authenticate
GET           /auth/token                                                                       controllers.AuthenticationController.getToken
DELETE        /auth/token                                                                       controllers.AuthenticationController.deleteToken
GET           /auth/switch                                                                      controllers.AuthenticationController.switchMultiUser(to: String)
POST          /auth/switchOrganization/:organizationName                                        controllers.AuthenticationController.switchOrganization(organizationName: String)
GET           /auth/accessibleBySwitching                                                       controllers.AuthenticationController.accessibleBySwitching(organizationName: Option[String], dataSetName: Option[String], annotationId: Option[String], workflowHash: Option[String])
POST          /auth/sendInvites                                                                 controllers.AuthenticationController.sendInvites
POST          /auth/startResetPassword                                                          controllers.AuthenticationController.handleStartResetPassword
POST          /auth/changePassword                                                              controllers.AuthenticationController.changePassword
POST          /auth/resetPassword                                                               controllers.AuthenticationController.handleResetPassword
GET           /auth/logout                                                                      controllers.AuthenticationController.logout
GET           /auth/sso                                                                         controllers.AuthenticationController.singleSignOn(sso: String, sig: String)
GET           /auth/oidc/login                                                                  controllers.AuthenticationController.loginViaOpenIdConnect
# /auth/oidc/callback route is used literally in code
GET           /auth/oidc/callback                                                               controllers.AuthenticationController.openIdCallback
POST          /auth/createOrganizationWithAdmin                                                 controllers.AuthenticationController.createOrganizationWithAdmin
POST          /auth/createUserInOrganization/:organizationName                                  controllers.AuthenticationController.createUserInOrganization(organizationName: String)

# Configurations
GET           /user/userConfiguration                                                           controllers.ConfigurationController.read
PUT           /user/userConfiguration                                                           controllers.ConfigurationController.update
POST          /dataSetConfigurations/:organizationName/:dataSetName                             controllers.ConfigurationController.readDataSetViewConfiguration(organizationName: String, dataSetName: String, sharingToken: Option[String])
PUT           /dataSetConfigurations/:organizationName/:dataSetName                             controllers.ConfigurationController.updateDataSetViewConfiguration(organizationName: String, dataSetName: String)
GET           /dataSetConfigurations/default/:organizationName/:dataSetName                     controllers.ConfigurationController.readDataSetAdminViewConfiguration(organizationName: String, dataSetName: String)
PUT           /dataSetConfigurations/default/:organizationName/:dataSetName                     controllers.ConfigurationController.updateDataSetAdminViewConfiguration(organizationName: String, dataSetName: String)

# Users
POST          /user/tasks/request                                                               controllers.TaskController.request
GET           /user/tasks/peek                                                                  controllers.TaskController.peekNext

GET           /users                                                                            controllers.UserController.list(isEditable: Option[Boolean], isTeamManagerOrAdmin: Option[Boolean], isAdmin: Option[Boolean])
GET           /user                                                                             controllers.UserController.current
GET           /user/tasks                                                                       controllers.UserController.tasks(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET           /user/annotations                                                                 controllers.UserController.annotations(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET           /user/loggedTime                                                                  controllers.UserController.loggedTime
GET           /users/:id                                                                        controllers.UserController.user(id: String)
PATCH         /users/:id                                                                        controllers.UserController.update(id: String)
PUT           /users/:id/taskTypeId                                                             controllers.UserController.updateLastTaskTypeId(id: String)
PUT           /users/:id/novelUserExperienceInfos                                               controllers.UserController.updateNovelUserExperienceInfos(id: String)
PUT           /users/:id/selectedTheme                                                          controllers.UserController.updateSelectedTheme(id: String)
GET           /users/:id/tasks                                                                  controllers.UserController.userTasks(id: String, isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET           /users/:id/loggedTime                                                             controllers.UserController.userLoggedTime(id: String)
POST          /users/loggedTime                                                                 controllers.UserController.usersLoggedTime
GET           /users/:id/annotations                                                            controllers.UserController.userAnnotations(id: String, isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])

# Team
GET           /teams                                                                            controllers.TeamController.list(isEditable: Option[Boolean])
POST          /teams                                                                            controllers.TeamController.create
DELETE        /teams/:id                                                                        controllers.TeamController.delete(id: String)
GET           /teams/:id/availableTasksReport                                                   controllers.ReportController.availableTasksReport(id: String)
GET           /teams/:id/projectProgressReport                                                  controllers.ReportController.projectProgressReport(id: String)

# DataSets
POST          /datasets/:organizationName/:dataSetName/createExplorational                      controllers.AnnotationController.createExplorational(organizationName: String, dataSetName: String)
GET           /datasets/:organizationName/:dataSetName/sandbox/:typ                             controllers.AnnotationController.getSandbox(organizationName: String, dataSetName: String, typ: String, sharingToken: Option[String])
GET           /datasets                                                                         controllers.DatasetController.list(isActive: Option[Boolean], isUnreported: Option[Boolean], organizationName: Option[String], onlyMyOrganization: Option[Boolean], uploaderId: Option[String], folderId: Option[String], includeSubfolders: Option[Boolean], searchQuery: Option[String], limit: Option[Int], compact: Option[Boolean])
POST          /datasets                                                                         controllers.DatasetController.create(typ: String)
POST          /datasets/exploreRemote                                                           controllers.DatasetController.exploreRemoteDataset
POST          /datasets/exploreAndAddRemote                                                     controllers.DatasetController.exploreAndAddRemoteDataset
GET           /datasets/disambiguate/:dataSetName/toNew                                         controllers.DatasetController.getOrganizationForDataset(dataSetName: String)
GET           /datasets/:organizationName/:dataSetName/health                                   controllers.DatasetController.health(organizationName: String, dataSetName: String, sharingToken: Option[String])
PATCH         /datasets/:organizationName/:dataSetName                                          controllers.DatasetController.update(organizationName: String, dataSetName: String)
PATCH         /datasets/:organizationName/:dataSetName/updatePartial                            controllers.DatasetController.updatePartial(organizationName: String, dataSetName: String)
GET           /datasets/:organizationName/:dataSetName/accessList                               controllers.DatasetController.accessList(organizationName: String, dataSetName: String)
GET           /datasets/:organizationName/:dataSetName/sharingToken                             controllers.DatasetController.getSharingToken(organizationName: String, dataSetName: String)
DELETE        /datasets/:organizationName/:dataSetName/sharingToken                             controllers.DatasetController.deleteSharingToken(organizationName: String, dataSetName: String)
PATCH         /datasets/:organizationName/:dataSetName/teams                                    controllers.DatasetController.updateTeams(organizationName: String, dataSetName: String)
GET           /datasets/:organizationName/:dataSetName/layers/:layer/thumbnail                  controllers.DatasetController.thumbnail(organizationName: String, dataSetName: String, layer: String, w: Option[Int], h: Option[Int], mappingName: Option[String])
POST          /datasets/:organizationName/:dataSetName/layers/:layer/segmentAnythingEmbedding   controllers.DatasetController.segmentAnythingEmbedding(organizationName: String, dataSetName: String, layer: String, intensityMin: Option[Float], intensityMax: Option[Float])
PUT           /datasets/:organizationName/:dataSetName/clearThumbnailCache                      controllers.DatasetController.removeFromThumbnailCache(organizationName: String, dataSetName: String)
GET           /datasets/:organizationName/:dataSetName/isValidNewName                           controllers.DatasetController.isValidNewName(organizationName: String, dataSetName: String)
GET           /datasets/:organizationName/:dataSetName                                          controllers.DatasetController.read(organizationName: String, dataSetName: String, sharingToken: Option[String])

# Folders
GET           /folders/root                                                                     controllers.FolderController.getRoot
GET           /folders/tree                                                                     controllers.FolderController.getTree
POST          /folders/create                                                                   controllers.FolderController.create(parentId: String, name: String)
GET           /folders/:id                                                                      controllers.FolderController.get(id: String)
PUT           /folders/:id                                                                      controllers.FolderController.update(id: String)
PUT           /folders/:id/move                                                                 controllers.FolderController.move(id: String, newParentId: String)
DELETE        /folders/:id                                                                      controllers.FolderController.delete(id: String)

# Datastores
GET           /datastores                                                                       controllers.DataStoreController.list
PUT           /datastores/:name/datasource                                                      controllers.WKRemoteDataStoreController.updateOne(name: String, key: String)
PUT           /datastores/:name/datasources                                                     controllers.WKRemoteDataStoreController.updateAll(name: String, key: String)
PATCH         /datastores/:name/status                                                          controllers.WKRemoteDataStoreController.statusUpdate(name: String, key: String)
POST          /datastores/:name/reserveUpload                                                   controllers.WKRemoteDataStoreController.reserveDataSetUpload(name: String, key: String, token: String)
POST          /datastores/:name/reportDatasetUpload                                             controllers.WKRemoteDataStoreController.reportDatasetUpload(name: String, key: String, token: String, dataSetName: String, dataSetSizeBytes: Long, needsConversion: Boolean, viaAddRoute: Boolean)
POST          /datastores/:name/deleteDataset                                                   controllers.WKRemoteDataStoreController.deleteDataset(name: String, key: String)
GET           /datastores/:name/jobExportProperties                                             controllers.WKRemoteDataStoreController.jobExportProperties(name: String, key: String, jobId: String)
GET           /datastores/:name/findCredential                                                  controllers.WKRemoteDataStoreController.findCredential(name: String, key: String, credentialId: String)
POST          /datastores/:name/validateUserAccess                                              controllers.UserTokenController.validateAccessViaDatastore(name: String, key: String, token: Option[String])
POST          /datastores                                                                       controllers.DataStoreController.create
DELETE        /datastores/:name                                                                 controllers.DataStoreController.delete(name: String)
PUT           /datastores/:name                                                                 controllers.DataStoreController.update(name: String)

# Tracingstores
GET           /tracingstore                                                                     controllers.TracingStoreController.listOne
POST          /tracingstores/:name/handleTracingUpdateReport                                    controllers.WKRemoteTracingStoreController.handleTracingUpdateReport(name: String, key: String)
POST          /tracingstores/:name/validateUserAccess                                           controllers.UserTokenController.validateAccessViaTracingstore(name: String, key: String, token: Option[String])
PUT           /tracingstores/:name                                                              controllers.TracingStoreController.update(name: String)
GET           /tracingstores/:name/dataSource                                                   controllers.WKRemoteTracingStoreController.dataSourceForTracing(name: String, key: String, tracingId: String)
GET           /tracingstores/:name/dataSourceId                                                 controllers.WKRemoteTracingStoreController.dataSourceIdForTracing(name: String, key: String, tracingId: String)
GET           /tracingstores/:name/dataStoreUri/:dataSetName                                    controllers.WKRemoteTracingStoreController.dataStoreUriForDataSet(name: String, key: String, organizationName: Option[String], dataSetName: String)

# User access tokens for datastore authentification
POST          /userToken/generate                                                               controllers.UserTokenController.generateTokenForDataStore

# Annotations
POST          /annotations/upload                                                               controllers.AnnotationIOController.upload
POST          /annotations/:typ/:id/duplicate                                                   controllers.AnnotationController.duplicate(typ: String, id: String)
PATCH         /annotations/:typ/:id/edit                                                        controllers.AnnotationController.editAnnotation(typ: String, id: String)
PATCH         /annotations/:typ/:id/editLayer/:tracingId                                        controllers.AnnotationController.editAnnotationLayer(typ: String, id: String, tracingId: String)

PATCH         /annotations/:typ/:id/finish                                                      controllers.AnnotationController.finish(typ: String, id: String, timestamp: Long)
PATCH         /annotations/:typ/finish                                                          controllers.AnnotationController.finishAll(typ: String, timestamp: Long)
PATCH         /annotations/:typ/:id/reopen                                                      controllers.AnnotationController.reopen(typ: String, id: String)
PUT           /annotations/:typ/:id/reset                                                       controllers.AnnotationController.reset(typ: String, id: String)
PATCH         /annotations/:typ/:id/transfer                                                    controllers.AnnotationController.transfer(typ: String, id: String)

GET           /annotations/:id/info                                                             controllers.AnnotationController.infoWithoutType(id: String, timestamp: Long)
PATCH         /annotations/:id/makeHybrid                                                       controllers.AnnotationController.makeHybridWithoutType(id: String, fallbackLayerName: Option[String])
PATCH         /annotations/:id/downsample                                                       controllers.AnnotationController.downsampleWithoutType(id: String, tracingId: String)
PATCH         /annotations/:id/addAnnotationLayer                                               controllers.AnnotationController.addAnnotationLayerWithoutType(id: String)
PATCH         /annotations/:id/deleteAnnotationLayer                                            controllers.AnnotationController.deleteAnnotationLayerWithoutType(id: String, layerName: String)
DELETE        /annotations/:id                                                                  controllers.AnnotationController.cancelWithoutType(id: String)
POST          /annotations/:id/merge/:mergedTyp/:mergedId                                       controllers.AnnotationController.mergeWithoutType(id: String, mergedTyp: String, mergedId: String)
GET           /annotations/:id/download                                                         controllers.AnnotationIOController.downloadWithoutType(id: String, skeletonVersion: Option[Long], volumeVersion: Option[Long], skipVolumeData: Option[Boolean])
POST          /annotations/:id/acquireMutex                                                     controllers.AnnotationController.tryAcquiringAnnotationMutex(id: String)
PATCH         /annotations/:id/addSegmentIndex                                                  controllers.AnnotationController.addSegmentIndex(id: String, tracingId: String)

GET           /annotations/:typ/:id/info                                                        controllers.AnnotationController.info(typ: String, id: String, timestamp: Long)
PATCH         /annotations/:typ/:id/makeHybrid                                                  controllers.AnnotationController.makeHybrid(typ: String, id: String, fallbackLayerName: Option[String])
PATCH         /annotations/:typ/:id/downsample                                                  controllers.AnnotationController.downsample(typ: String, id: String, tracingId: String)
PATCH         /annotations/:typ/:id/addAnnotationLayer                                          controllers.AnnotationController.addAnnotationLayer(typ: String, id: String)
PATCH         /annotations/:typ/:id/deleteAnnotationLayer                                       controllers.AnnotationController.deleteAnnotationLayer(typ: String, id: String, layerName: String)
DELETE        /annotations/:typ/:id                                                             controllers.AnnotationController.cancel(typ: String, id: String)
POST          /annotations/:typ/:id/merge/:mergedTyp/:mergedId                                  controllers.AnnotationController.merge(typ: String, id: String, mergedTyp: String, mergedId: String)
GET           /annotations/:typ/:id/download                                                    controllers.AnnotationIOController.download(typ: String, id: String, skeletonVersion: Option[Long], volumeVersion: Option[Long], skipVolumeData: Option[Boolean])

GET           /annotations/:typ/:id/loggedTime                                                  controllers.AnnotationController.loggedTime(typ: String, id: String)

GET           /annotations/source/:accessTokenOrId                                              controllers.AnnotationPrivateLinkController.annotationSource(accessTokenOrId: String, userToken: Option[String])

GET           /annotations/shared                                                               controllers.AnnotationController.sharedAnnotations()
GET           /annotations/readable                                                             controllers.AnnotationController.listExplorationals(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET           /annotations/:typ/:id/sharedTeams                                                 controllers.AnnotationController.getSharedTeams(typ: String, id: String)
PATCH         /annotations/:typ/:id/sharedTeams                                                 controllers.AnnotationController.updateSharedTeams(typ: String, id: String)
PATCH         /annotations/:typ/:id/othersMayEdit                                               controllers.AnnotationController.updateOthersMayEdit(typ: String, id: String, othersMayEdit: Boolean)

# Annotation Private Links
GET           /zarrPrivateLinks                                                                 controllers.AnnotationPrivateLinkController.list
GET           /zarrPrivateLinks/byAnnotation/:annotationId                                      controllers.AnnotationPrivateLinkController.listByAnnotation(annotationId: String)
POST          /zarrPrivateLinks                                                                 controllers.AnnotationPrivateLinkController.create
PUT           /zarrPrivateLinks/:id                                                             controllers.AnnotationPrivateLinkController.update(id: String)
DELETE        /zarrPrivateLinks/:id                                                             controllers.AnnotationPrivateLinkController.delete(id: String)
GET           /zarrPrivateLinks/:id                                                             controllers.AnnotationPrivateLinkController.get(id: String)

# Meshes
POST          /meshes                                                                           controllers.MeshController.create
PUT           /meshes/:id                                                                       controllers.MeshController.update(id: String)
DELETE        /meshes/:id                                                                       controllers.MeshController.delete(id: String)
GET           /meshes/:id                                                                       controllers.MeshController.get(id: String)
PUT           /meshes/:id/data                                                                  controllers.MeshController.updateData(id: String)
GET           /meshes/:id/data                                                                  controllers.MeshController.getData(id: String)

# Tasks
POST          /tasks                                                                            controllers.TaskController.create
POST          /tasks/createFromFiles                                                            controllers.TaskController.createFromFiles
POST          /tasks/list                                                                       controllers.TaskController.listTasks
GET           /tasks/experienceDomains                                                          controllers.TaskController.listExperienceDomains
GET           /tasks/:id                                                                        controllers.TaskController.read(id: String)
DELETE        /tasks/:id                                                                        controllers.TaskController.delete(id: String)
PUT           /tasks/:id                                                                        controllers.TaskController.update(id: String)
POST          /tasks/:id/assign                                                                 controllers.TaskController.assignOne(id: String, userId: String)
GET           /tasks/:id/annotations                                                            controllers.AnnotationController.annotationsForTask(id: String)

# TaskTypes
GET           /taskTypes                                                                        controllers.TaskTypeController.list
POST          /taskTypes                                                                        controllers.TaskTypeController.create
DELETE        /taskTypes/:id                                                                    controllers.TaskTypeController.delete(id: String)
GET           /taskTypes/:id/tasks                                                              controllers.TaskController.listTasksForType(id: String)
GET           /taskTypes/:id/projects                                                           controllers.ProjectController.projectsForTaskType(id: String)
GET           /taskTypes/:id                                                                    controllers.TaskTypeController.get(id: String)
PUT           /taskTypes/:id                                                                    controllers.TaskTypeController.update(id: String)

# Scripts
GET           /scripts                                                                          controllers.ScriptController.list
POST          /scripts                                                                          controllers.ScriptController.create
GET           /scripts/:id                                                                      controllers.ScriptController.get(id: String)
PUT           /scripts/:id                                                                      controllers.ScriptController.update(id: String)
DELETE        /scripts/:id                                                                      controllers.ScriptController.delete(id: String)

# Projects
GET           /projects                                                                         controllers.ProjectController.list
GET           /projects/withStatus                                                              controllers.ProjectController.listWithStatus
POST          /projects                                                                         controllers.ProjectController.create
GET           /projects/byName/:name                                                            controllers.ProjectController.readByName(name: String)
GET           /projects/:id                                                                     controllers.ProjectController.read(id: String)
DELETE        /projects/:id                                                                     controllers.ProjectController.delete(id: String)
PUT           /projects/:id                                                                     controllers.ProjectController.update(id: String)
GET           /projects/:id/tasks                                                               controllers.ProjectController.tasksForProject(id: String, limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
PATCH         /projects/:id/incrementEachTasksInstances                                         controllers.ProjectController.incrementEachTasksInstances(id: String, delta: Option[Long])
PATCH         /projects/:id/pause                                                               controllers.ProjectController.pause(id: String)
PATCH         /projects/:id/resume                                                              controllers.ProjectController.resume(id: String)
GET           /projects/:id/usersWithActiveTasks                                                controllers.ProjectController.usersWithActiveTasks(id:String)
POST          /projects/:id/transferActiveTasks                                                 controllers.ProjectController.transferActiveTasks(id:String)

# Statistics
GET           /statistics/webknossos                                                            controllers.StatisticsController.webKnossos(interval: String, start: Option[Long], end: Option[Long])
GET           /statistics/users                                                                 controllers.StatisticsController.users(interval: String, start: Option[Long], end: Option[Long], limit: Int)

# Organizations
GET           /organizations                                                                    controllers.OrganizationController.list
POST          /organizations                                                                    controllers.OrganizationController.create
GET           /organizations/byInvite/:inviteToken                                              controllers.OrganizationController.getByInvite(inviteToken: String)
GET           /organizations/default                                                            controllers.OrganizationController.getDefault
GET           /organizationsIsEmpty                                                             controllers.OrganizationController.organizationsIsEmpty
GET           /organizations/:organizationName                                                  controllers.OrganizationController.get(organizationName: String)
PATCH         /organizations/:organizationName                                                  controllers.OrganizationController.update(organizationName: String)
DELETE        /organizations/:organizationName                                                  controllers.OrganizationController.delete(organizationName: String)
POST          /organizations/:organizationName/addUser                                          controllers.OrganizationController.addUser(organizationName: String)
GET           /operatorData                                                                     controllers.OrganizationController.getOperatorData
POST          /pricing/requestExtension                                                         controllers.OrganizationController.sendExtendPricingPlanEmail
POST          /pricing/requestUpgrade                                                           controllers.OrganizationController.sendUpgradePricingPlanEmail(requestedPlan: String)
POST          /pricing/requestUsers                                                             controllers.OrganizationController.sendUpgradePricingPlanUsersEmail(requestedUsers: Int)
POST          /pricing/requestStorage                                                           controllers.OrganizationController.sendUpgradePricingPlanStorageEmail(requestedStorage: Int)
GET           /pricing/status                                                                   controllers.OrganizationController.pricingStatus
GET           /termsOfService                                                                   controllers.OrganizationController.getTermsOfService
POST          /termsOfService/accept                                                            controllers.OrganizationController.acceptTermsOfService(version: Int)
GET           /termsOfService/acceptanceNeeded                                                  controllers.OrganizationController.termsOfServiceAcceptanceNeeded

# Timelogging
GET           /time/allusers/:year/:month                                                       controllers.TimeController.getWorkingHoursOfAllUsers(year: Int, month: Int, startDay: Option[Int], endDay: Option[Int])
GET           /time/userlist/:year/:month                                                       controllers.TimeController.getWorkingHoursOfUsers(email: String, year: Int, month: Int, startDay: Option[Int], endDay: Option[Int])
GET           /time/user/:userId                                                                controllers.TimeController.getWorkingHoursOfUser(userId: String, startDate: Long, endDate: Long)

# Long-Running Jobs
GET           /jobs/request                                                                     controllers.WKRemoteWorkerController.requestJobs(key: String)
GET           /jobs                                                                             controllers.JobsController.list
GET           /jobs/status                                                                      controllers.JobsController.status
POST          /jobs/run/convertToWkw/:organizationName/:dataSetName                             controllers.JobsController.runConvertToWkwJob(organizationName: String, dataSetName: String, scale: String)
POST          /jobs/run/computeMeshFile/:organizationName/:dataSetName                          controllers.JobsController.runComputeMeshFileJob(organizationName: String, dataSetName: String, layerName: String, mag: String, agglomerateView: Option[String])
POST          /jobs/run/exportTiff/:organizationName/:dataSetName                               controllers.JobsController.runExportTiffJob(organizationName: String, dataSetName: String, bbox: String, layerName: Option[String], mag: Option[String], annotationLayerName: Option[String], annotationId: Option[String], asOmeTiff: Boolean)
POST          /jobs/run/inferNuclei/:organizationName/:dataSetName                              controllers.JobsController.runInferNucleiJob(organizationName: String, dataSetName: String, layerName: String, newDatasetName: String)
POST          /jobs/run/inferNeurons/:organizationName/:dataSetName                             controllers.JobsController.runInferNeuronsJob(organizationName: String, dataSetName: String, layerName: String, bbox: String, newDatasetName: String)
POST          /jobs/run/materializeVolumeAnnotation/:organizationName/:dataSetName              controllers.JobsController.runMaterializeVolumeAnnotationJob(organizationName: String, dataSetName: String, fallbackLayerName: String, annotationId: String, annotationType: String, newDatasetName: String, outputSegmentationLayerName: String, mergeSegments: Boolean, volumeLayerName: Option[String])
POST          /jobs/run/findLargestSegmentId/:organizationName/:dataSetName                     controllers.JobsController.runFindLargestSegmentIdJob(organizationName: String, dataSetName: String, layerName: String)
GET           /jobs/:id                                                                         controllers.JobsController.get(id: String)
PATCH         /jobs/:id/cancel                                                                  controllers.JobsController.cancel(id: String)
POST          /jobs/:id/status                                                                  controllers.WKRemoteWorkerController.updateJobStatus(key: String, id: String)
GET           /jobs/:id/export                                                                  controllers.JobsController.export(id: String)

# Publications
GET           /publications                                                                     controllers.PublicationController.listPublications()
GET           /publications/:id                                                                 controllers.PublicationController.read(id: String)

# Shortlinks
POST          /shortLinks                                                                       controllers.ShortLinkController.create
GET           /shortLinks/byKey/:key                                                            controllers.ShortLinkController.getByKey(key: String)

# Credentials
POST          /credentials/httpBasicAuth                                                        controllers.CredentialController.createHttpBasicAuthCredential
POST          /credentials/s3AccessKey                                                          controllers.CredentialController.createS3AccessKeyCredential
POST          /credentials/googleServiceAccount                                                 controllers.CredentialController.createGoogleServiceAccountCredential

# Email verification
POST          /verifyEmail/:key                                                                 controllers.EmailVerificationController.verify(key: String)
POST          /verifyEmail                                                                      controllers.EmailVerificationController.requestVerificationMail

# Voxelytics
POST          /voxelytics/workflows                                                             controllers.VoxelyticsController.storeWorkflow
GET           /voxelytics/workflows                                                             controllers.VoxelyticsController.listWorkflows
GET           /voxelytics/workflows/:workflowHash                                               controllers.VoxelyticsController.getWorkflow(workflowHash: String, runId: Option[String])
POST          /voxelytics/workflows/:workflowHash/events                                        controllers.VoxelyticsController.storeWorkflowEvents(workflowHash: String, runName: String)
GET           /voxelytics/workflows/:workflowHash/chunkStatistics                               controllers.VoxelyticsController.getChunkStatistics(workflowHash: String, runId: Option[String], taskName: String)
GET           /voxelytics/workflows/:workflowHash/artifactChecksums                             controllers.VoxelyticsController.getArtifactChecksums(workflowHash: String, runId: Option[String], taskName: String, artifactName: Option[String])
POST          /voxelytics/logs                                                                  controllers.VoxelyticsController.appendLogs
GET           /voxelytics/logs                                                                  controllers.VoxelyticsController.getLogs(runId: String, taskName: Option[String], minLevel: Option[String], startTimestamp:Long, endTimestamp: Long, limit: Option[Int])
