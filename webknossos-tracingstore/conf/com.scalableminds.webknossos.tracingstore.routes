# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Health endpoint
GET         /health                                                           @com.scalableminds.webknossos.tracingstore.controllers.Application.health

# Annotations (concerns AnnotationProto, not annotation info as stored in postgres)
POST        /annotation/save                                                  @com.scalableminds.webknossos.tracingstore.controllers.TSAnnotationController.save(annotationId: String)
GET         /annotation/:annotationId                                         @com.scalableminds.webknossos.tracingstore.controllers.TSAnnotationController.get(annotationId: String, version: Option[Long])
POST        /annotation/:annotationId/update                                  @com.scalableminds.webknossos.tracingstore.controllers.TSAnnotationController.update(annotationId: String)
GET         /annotation/:annotationId/updateActionLog                         @com.scalableminds.webknossos.tracingstore.controllers.TSAnnotationController.updateActionLog(annotationId: String, newestVersion: Option[Long], oldestVersion: Option[Long])
GET         /annotation/:annotationId/updateActionStatistics                  @com.scalableminds.webknossos.tracingstore.controllers.TSAnnotationController.updateActionStatistics(annotationId: String)
GET         /annotation/:annotationId/newestVersion                           @com.scalableminds.webknossos.tracingstore.controllers.TSAnnotationController.newestVersion(annotationId: String)

# Volume tracings
POST        /volume/save                                                      @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.save()
POST        /volume/:annotationId/:tracingId/initialData                      @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.initialData(annotationId: String, tracingId: String, minResolution: Option[Int], maxResolution: Option[Int])
POST        /volume/:annotationId/:tracingId/initialDataMultiple              @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.initialDataMultiple(annotationId: String, tracingId: String)
GET         /volume/:annotationId/:tracingId                                  @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.get(annotationId: String, tracingId: String, version: Option[Long])
GET         /volume/:annotationId/:tracingId/allDataZip                       @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.allDataZip(annotationId: String, tracingId: String, volumeDataZipFormat: String, version: Option[Long], voxelSize: Option[String], voxelSizeUnit: Option[String])
POST        /volume/:annotationId/:tracingId/data                             @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.data(annotationId: String, tracingId: String)
POST        /volume/:annotationId/:tracingId/duplicate                        @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.duplicate(annotationId: String, tracingId: String, fromTask: Option[Boolean], minResolution: Option[Int], maxResolution: Option[Int], downsample: Option[Boolean], editPosition: Option[String], editRotation: Option[String], boundingBox: Option[String])
POST        /volume/:annotationId/:tracingId/adHocMesh                        @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.requestAdHocMesh(annotationId: String, tracingId: String)
POST        /volume/:annotationId/:tracingId/fullMesh.stl                     @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.loadFullMeshStl(annotationId: String, tracingId: String)
POST        /volume/:annotationId/:tracingId/segmentIndex/:segmentId          @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.getSegmentIndex(annotationId: String, tracingId: String, segmentId: Long)
POST        /volume/:annotationId/:tracingId/importVolumeData                 @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.importVolumeData(annotationId: String, tracingId: String)
POST        /volume/:annotationId/:tracingId/addSegmentIndex                  @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.addSegmentIndex(annotationId: String, tracingId: String, dryRun: Boolean)
GET         /volume/:annotationId/:tracingId/findData                         @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.findData(annotationId: String, tracingId: String)
POST        /volume/:annotationId/:tracingId/segmentStatistics/volume         @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.getSegmentVolume(annotationId: String, tracingId: String)
POST        /volume/:annotationId/:tracingId/segmentStatistics/boundingBox    @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.getSegmentBoundingBox(annotationId: String, tracingId: String)
POST        /volume/getMultiple                                               @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.getMultiple
POST        /volume/mergedFromIds                                             @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.mergedFromIds(persist: Boolean)
POST        /volume/mergedFromContents                                        @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingController.mergedFromContents(persist: Boolean)

# Editable Mappings
POST        /mapping/:annotationId/:tracingId/makeMappingEditable             @com.scalableminds.webknossos.tracingstore.controllers.EditableMappingController.makeMappingEditable(annotationId: String, tracingId: String)
GET         /mapping/:annotationId/:tracingId/info                            @com.scalableminds.webknossos.tracingstore.controllers.EditableMappingController.editableMappingInfo(annotationId: String, tracingId: String, version: Option[Long])
GET         /mapping/:annotationId/:tracingId/segmentsForAgglomerate          @com.scalableminds.webknossos.tracingstore.controllers.EditableMappingController.segmentIdsForAgglomerate(annotationId: String, tracingId: String, agglomerateId: Long)
POST        /mapping/:annotationId/:tracingId/agglomeratesForSegments         @com.scalableminds.webknossos.tracingstore.controllers.EditableMappingController.agglomerateIdsForSegments(annotationId: String, tracingId: String)
POST        /mapping/:annotationId/:tracingId/agglomerateGraphMinCut          @com.scalableminds.webknossos.tracingstore.controllers.EditableMappingController.agglomerateGraphMinCut(annotationId: String, tracingId: String)
POST        /mapping/:annotationId/:tracingId/agglomerateGraphNeighbors       @com.scalableminds.webknossos.tracingstore.controllers.EditableMappingController.agglomerateGraphNeighbors(annotationId: String, tracingId: String)
# TODO rename
GET         /volume/:annotationId/:tracingId/agglomerateSkeleton/:agglomerateId     @com.scalableminds.webknossos.tracingstore.controllers.EditableMappingController.agglomerateSkeleton(annotationId: String, tracingId: String, agglomerateId: Long)

# Zarr endpoints for volume annotations
# Zarr version 2
GET         /volume/zarr/json/:annotationId/:tracingId                        @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingFolderContentJson(annotationId: String, tracingId: String, zarrVersion: Int = 2)
GET         /volume/zarr/json/:annotationId/:tracingId/:mag                   @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingMagFolderContentJson(annotationId: String, tracingId: String, mag: String, zarrVersion: Int = 2)
GET         /volume/zarr/:annotationId/:tracingId                             @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingFolderContent(annotationId: String, tracingId: String, zarrVersion: Int = 2)
GET         /volume/zarr/:annotationId/:tracingId/                            @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingFolderContent(annotationId: String, tracingId: String, zarrVersion: Int = 2)
GET         /volume/zarr/:annotationId/:tracingId/.zgroup                     @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.zGroup(annotationId: String, tracingId: String)
GET         /volume/zarr/:annotationId/:tracingId/.zattrs                     @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.zAttrs(annotationId: String, tracingId: String)
GET         /volume/zarr/:annotationId/:tracingId/zarrSource                  @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.zarrSource(annotationId: String, tracingId: String, tracingName: Option[String], zarrVersion: Int = 2)
GET         /volume/zarr/:annotationId/:tracingId/:mag                        @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingMagFolderContent(annotationId: String, tracingId: String, mag: String, zarrVersion: Int = 2)
GET         /volume/zarr/:annotationId/:tracingId/:mag/                       @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingMagFolderContent(annotationId: String, tracingId: String, mag: String, zarrVersion: Int = 2)
GET         /volume/zarr/:annotationId/:tracingId/:mag/.zarray                @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.zArray(annotationId: String, tracingId: String, mag: String)
GET         /volume/zarr/:annotationId/:tracingId/:mag/:coordinates           @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.rawZarrCube(annotationId: String, tracingId: String, mag: String, coordinates: String)

# Zarr version 3
GET         /volume/zarr3_experimental/json/:annotationId/:tracingId                        @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingFolderContentJson(annotationId: String, tracingId: String, zarrVersion: Int = 3)
GET         /volume/zarr3_experimental/json/:annotationId/:tracingId/:mag                   @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingMagFolderContentJson(annotationId: String, tracingId: String, mag: String, zarrVersion: Int = 3)
GET         /volume/zarr3_experimental/:annotationId/:tracingId                             @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingFolderContent(annotationId: String, tracingId: String, zarrVersion: Int = 3)
GET         /volume/zarr3_experimental/:annotationId/:tracingId/                            @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingFolderContent(annotationId: String, tracingId: String, zarrVersion: Int = 3)
GET         /volume/zarr3_experimental/:annotationId/:tracingId/zarrSource                  @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.zarrSource(annotationId: String, tracingId: String, tracingName: Option[String], zarrVersion: Int = 3)
GET         /volume/zarr3_experimental/:annotationId/:tracingId/zarr.json                   @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.zarrJson(annotationId: String, tracingId: String)
GET         /volume/zarr3_experimental/:annotationId/:tracingId/:mag                        @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingMagFolderContent(annotationId: String, tracingId: String, mag: String, zarrVersion: Int = 3)
GET         /volume/zarr3_experimental/:annotationId/:tracingId/:mag/                       @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.volumeTracingMagFolderContent(annotationId: String, tracingId: String, mag: String, zarrVersion: Int = 3)
GET         /volume/zarr3_experimental/:annotationId/:tracingId/:mag/zarr.json              @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.zarrJsonForMag(annotationId: String, tracingId: String, mag: String)
GET         /volume/zarr3_experimental/:annotationId/:tracingId/:mag/:coordinates           @com.scalableminds.webknossos.tracingstore.controllers.VolumeTracingZarrStreamingController.rawZarrCube(annotationId: String, tracingId: String, mag: String, coordinates: String)

# Skeleton tracings
POST        /skeleton/save                                                    @com.scalableminds.webknossos.tracingstore.controllers.SkeletonTracingController.save()
POST        /skeleton/saveMultiple                                            @com.scalableminds.webknossos.tracingstore.controllers.SkeletonTracingController.saveMultiple()
POST        /skeleton/mergedFromContents                                      @com.scalableminds.webknossos.tracingstore.controllers.SkeletonTracingController.mergedFromContents(persist: Boolean)
POST        /skeleton/mergedFromIds                                           @com.scalableminds.webknossos.tracingstore.controllers.SkeletonTracingController.mergedFromIds(persist: Boolean)
GET         /skeleton/:annotationId/:tracingId                                @com.scalableminds.webknossos.tracingstore.controllers.SkeletonTracingController.get(annotationId: String, tracingId: String, version: Option[Long])
POST        /skeleton/getMultiple                                             @com.scalableminds.webknossos.tracingstore.controllers.SkeletonTracingController.getMultiple
POST        /skeleton/:annotationId/:tracingId/duplicate                      @com.scalableminds.webknossos.tracingstore.controllers.SkeletonTracingController.duplicate(annotationId: String, tracingId: String, version: Option[Long], fromTask: Option[Boolean], editPosition: Option[String], editRotation: Option[String], boundingBox: Option[String])
