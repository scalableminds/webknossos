/* eslint-disable */
(function (window, undefined) {
  let core_push = Array.prototype.push,
    core_slice = Array.prototype.slice,
    core_indexOf = Array.prototype.indexOf,
    core_toString = Object.prototype.toString,
    core_hasOwn = Object.prototype.hasOwnProperty,
    core_trim = String.prototype.trim,
    core_rspace = /\s+/,
    class2type = [],
    _jQuery = window.jQuery,
    _$ = window.$,
    jQuery = function (selector) { if (selector) throw "This is the stand alone version of jQuery.Deferred there isn't support for selectors, use jQuery.noConflict() and include a complete jQuery"; return new jQuery.fn.init(); }; jQuery.fn = jQuery.prototype = { constructor: jQuery, init() { return this; }, each(callback, args) { return jQuery.each(this, callback, args); } }; jQuery.extend = jQuery.fn.extend = function () {
      let options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; if (typeof target === "boolean") { deep = target; target = arguments[1] || {}; i = 2; } if (typeof target !== "object" && !jQuery.isFunction(target)) { target = {}; } if (length === i) { target = this; --i; } for (;i < length; i++) { if ((options = arguments[i]) != null) { for (name in options) { src = target[name]; copy = options[name]; if (target === copy) { continue; } if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) { if (copyIsArray) { copyIsArray = false; clone = src && jQuery.isArray(src) ? src : []; } else { clone = src && jQuery.isPlainObject(src) ? src : {}; }target[name] = jQuery.extend(deep, clone, copy); } else if (copy !== undefined) { target[name] = copy; } } } } return target;
    }; const optionsCache = {}; function createOptions(options) { const object = optionsCache[options] = {}; jQuery.each(options.split(core_rspace), (_, flag) => { object[flag] = true; }); return object; }jQuery.extend({ noConflict(deep) { if (window.$ === jQuery) { window.$ = _$; } if (deep && window.jQuery === jQuery) { window.jQuery = _jQuery; } return jQuery; }, inArray(elem, arr, i) { let len; if (arr) { if (core_indexOf) { return core_indexOf.call(arr, elem, i); }len = arr.length; i = i ? i < 0 ? Math.max(0, len + i) : i : 0; for (;i < len; i++) { if (i in arr && arr[i] === elem) { return i; } } } return -1; }, type(obj) { return obj == null ? String(obj) : class2type[core_toString.call(obj)] || "object"; }, isFunction(obj) { return jQuery.type(obj) === "function"; }, each(obj, callback, args) {
      let name,
        i = 0,
        length = obj.length,
        isObj = length === undefined || jQuery.isFunction(obj); if (args) { if (isObj) { for (name in obj) { if (callback.apply(obj[name], args) === false) { break; } } } else { for (;i < length;) { if (callback.apply(obj[i++], args) === false) { break; } } } } else if (isObj) { for (name in obj) { if (callback.call(obj[name], name, obj[name]) === false) { break; } } } else { for (;i < length;) { if (callback.call(obj[i], i, obj[i++]) === false) { break; } } } return obj;
    } }); jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), (i, name) => { class2type[`[object ${name}]`] = name.toLowerCase(); }); jQuery.Callbacks = function (options) {
      options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options); let memory,
        fired,
        firing,
        firingStart,
        firingLength,
        firingIndex,
        list = [],
        stack = !options.once && [],
        fire = function (data) { memory = options.memory && data; fired = true; firingIndex = firingStart || 0; firingStart = 0; firingLength = list.length; firing = true; for (;list && firingIndex < firingLength; firingIndex++) { if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) { memory = false; break; } }firing = false; if (list) { if (stack) { if (stack.length) { fire(stack.shift()); } } else if (memory) { list = []; } else { self.disable(); } } },
        self = { add() { if (list) { const start = list.length; (function add(args) { jQuery.each(args, (_, arg) => { const type = jQuery.type(arg); if (type === "function") { if (!options.unique || !self.has(arg)) { list.push(arg); } } else if (arg && arg.length && type !== "string") { add(arg); } }); }(arguments)); if (firing) { firingLength = list.length; } else if (memory) { firingStart = start; fire(memory); } } return this; }, remove() { if (list) { jQuery.each(arguments, (_, arg) => { let index; while ((index = jQuery.inArray(arg, list, index)) > -1) { list.splice(index, 1); if (firing) { if (index <= firingLength) { firingLength--; } if (index <= firingIndex) { firingIndex--; } } } }); } return this; }, has(fn) { return jQuery.inArray(fn, list) > -1; }, empty() { list = []; return this; }, disable() { list = stack = memory = undefined; return this; }, disabled() { return !list; }, lock() { stack = undefined; if (!memory) { self.disable(); } return this; }, locked() { return !stack; }, fireWith(context, args) { args = args || []; args = [context, args.slice ? args.slice() : args]; if (list && (!fired || stack)) { if (firing) { stack.push(args); } else { fire(args); } } return this; }, fire() { self.fireWith(this, arguments); return this; }, fired() { return !!fired; } }; return self;
    }; jQuery.extend({ Deferred(func) {
      let tuples = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
        state = "pending",
        promise = { state() { return state; }, always() { deferred.done(arguments).fail(arguments); return this; }, then() {
          let fns = arguments; return jQuery.Deferred((newDefer) => {
            jQuery.each(tuples, (i, tuple) => {
              let action = tuple[0],
                fn = fns[i]; deferred[tuple[1]](jQuery.isFunction(fn) ? function () { const returned = fn.apply(this, arguments); if (returned && jQuery.isFunction(returned.promise)) { returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify); } else { newDefer[`${action}With`](this === deferred ? newDefer : this, [returned]); } } : newDefer[action]);
            }); fns = null;
          }).promise();
        }, promise(obj) { return obj != null ? jQuery.extend(obj, promise) : promise; } },
        deferred = {}; promise.pipe = promise.then; jQuery.each(tuples, (i, tuple) => {
          let list = tuple[2],
            stateString = tuple[3]; promise[tuple[1]] = list.add; if (stateString) { list.add(() => { state = stateString; }, tuples[i ^ 1][2].disable, tuples[2][2].lock); }deferred[tuple[0]] = list.fire; deferred[`${tuple[0]}With`] = list.fireWith;
        }); promise.promise(deferred); if (func) { func.call(deferred, deferred); } return deferred;
    }, when(subordinate) {
      let i = 0,
        resolveValues = core_slice.call(arguments),
        length = resolveValues.length,
        remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
        updateFunc = function (i, contexts, values) { return function (value) { contexts[i] = this; values[i] = arguments.length > 1 ? core_slice.call(arguments) : value; if (values === progressValues) { deferred.notifyWith(contexts, values); } else if (!--remaining) { deferred.resolveWith(contexts, values); } }; },
        progressValues,
        progressContexts,
        resolveContexts; if (length > 1) { progressValues = new Array(length); progressContexts = new Array(length); resolveContexts = new Array(length); for (;i < length; i++) { if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) { resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues)); } else { --remaining; } } } if (!remaining) { deferred.resolveWith(resolveContexts, resolveValues); } return deferred.promise();
    } }); window.jQuery = window.$ = jQuery;
}(this));
module.exports = this.$;
/* eslint-enable */
