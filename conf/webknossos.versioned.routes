# API versioning is handled here. Higher-Priority routes first

# example: assume, the features route has changed, introducing v2. The older v1 needs to be provided in the legacyApiController
# Note: keep this in sync with the reported version numbers in the utils.ApiVersioning trait

# version log:
 # changed in v6: isValidName always returns Ok, with a JSON object containing possible errors and key "isValid"
 # new in v5: annotation layers (changed annotation json result, changed createExplorational params)
 # new in v4: project queried by id, not name (changed route parameters)
 # new in v3: annotation info and finish request now take timestamp
 # new in v2: annotation json contains visibility enum instead of booleans

->       /v6/                                                                 webknossos.latest.Routes


GET      /v5/datasets/:organizationName/:datasetName/isValidNewName           controllers.LegacyApiController.assertValidNewNameV5(organizationName: String, datasetName: String)

->       /v5/                                                                 webknossos.latest.Routes


# support changes to v5
GET      /v4/annotations/:typ/:id/info                                        controllers.LegacyApiController.annotationInfoV4(typ: String, id: String, timestamp: Long)
PATCH    /v4/annotations/:typ/:id/finish                                      controllers.LegacyApiController.annotationFinishV4(typ: String, id: String, timestamp: Long)
POST     /v4/annotations/:typ/:id/merge/:mergedTyp/:mergedId                  controllers.LegacyApiController.annotationMergeV4(typ: String, id: String, mergedTyp: String, mergedId: String)
PATCH    /v4/annotations/:typ/:id/edit                                        controllers.LegacyApiController.annotationEditV4(typ: String, id: String)
POST     /v4/annotations/:typ/:id/duplicate                                   controllers.LegacyApiController.annotationDuplicateV4(typ: String, id: String)
PATCH    /v4/annotations/:typ/:id/reopen                                      controllers.LegacyApiController.annotationReopenV4(typ: String, id: String)
PUT      /v4/annotations/:typ/:id/reset                                       controllers.LegacyApiController.annotationResetV4(typ: String, id: String)
GET      /v4/user/annotations                                                 controllers.LegacyApiController.annotationListForCurrentUserV4(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v4/user/tasks                                                       controllers.LegacyApiController.annotationTasksV4(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v4/users/:id/annotations                                            controllers.LegacyApiController.annotationListByUserV4(id: String, isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v4/users/:id/tasks                                                  controllers.LegacyApiController.annotationTasksByUserV4(id: String, isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v4/tasks/:id/annotations                                            controllers.LegacyApiController.annotationsForTaskV4(id: String)
POST     /v4/datasets/:organizationName/:datasetName/createExplorational      controllers.LegacyApiController.annotationCreateExplorationalV4(organizationName: String, datasetName: String)

->       /v4/                                                                 webknossos.latest.Routes

# support changes to v5
PATCH    /v3/annotations/:typ/:id/finish                                      controllers.LegacyApiController.annotationFinishV4(typ: String, id: String, timestamp: Long)
GET      /v3/annotations/:typ/:id/info                                        controllers.LegacyApiController.annotationInfoV4(typ: String, id: String, timestamp: Long)
POST     /v3/annotations/:typ/:id/merge/:mergedTyp/:mergedId                  controllers.LegacyApiController.annotationMergeV4(typ: String, id: String, mergedTyp: String, mergedId: String)
PATCH    /v3/annotations/:typ/:id/edit                                        controllers.LegacyApiController.annotationEditV4(typ: String, id: String)
POST     /v3/annotations/:typ/:id/duplicate                                   controllers.LegacyApiController.annotationDuplicateV4(typ: String, id: String)
PATCH    /v3/annotations/:typ/:id/reopen                                      controllers.LegacyApiController.annotationReopenV4(typ: String, id: String)
PUT      /v3/annotations/:typ/:id/reset                                       controllers.LegacyApiController.annotationResetV4(typ: String, id: String)
GET      /v3/user/annotations                                                 controllers.LegacyApiController.annotationListForCurrentUserV4(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v3/user/tasks                                                       controllers.LegacyApiController.annotationTasksV4(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v3/users/:id/annotations                                            controllers.LegacyApiController.annotationListByUserV4(id: String, isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v3/users/:id/tasks                                                  controllers.LegacyApiController.annotationTasksByUserV4(id: String, isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v3/tasks/:id/annotations                                            controllers.LegacyApiController.annotationsForTaskV4(id: String)
POST     /v3/datasets/:organizationName/:datasetName/createExplorational      controllers.LegacyApiController.annotationCreateExplorationalV4(organizationName: String, datasetName: String)

# support changes to v4
POST     /v3/tasks/list                                                       controllers.LegacyApiController.taskListTasks
GET      /v3/projects/:name                                                   controllers.LegacyApiController.projectRead(name: String)
DELETE   /v3/projects/:name                                                   controllers.LegacyApiController.projectDelete(name: String)
PUT      /v3/projects/:name                                                   controllers.LegacyApiController.projectUpdate(name: String)
GET      /v3/projects/:name/tasks                                             controllers.LegacyApiController.projectTasksForProject(name: String, limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
PATCH    /v3/projects/:name/incrementEachTasksInstances                       controllers.LegacyApiController.projectIncrementEachTasksInstances(name: String, delta: Option[Long])
PATCH    /v3/projects/:name/pause                                             controllers.LegacyApiController.projectPause(name: String)
PATCH    /v3/projects/:name/resume                                            controllers.LegacyApiController.projectResume(name: String)

->       /v3/                                                                 webknossos.latest.Routes


# Support changes to v3 and v5
GET      /v2/annotations/:typ/:id/info                                        controllers.LegacyApiController.annotationInfoV2(typ: String, id: String)
PATCH    /v2/annotations/:typ/:id/finish                                      controllers.LegacyApiController.annotationFinishV2(typ: String, id: String)

# support changes to v5
POST     /v2/annotations/:typ/:id/merge/:mergedTyp/:mergedId                  controllers.LegacyApiController.annotationMergeV4(typ: String, id: String, mergedTyp: String, mergedId: String)
PATCH    /v2/annotations/:typ/:id/edit                                        controllers.LegacyApiController.annotationEditV4(typ: String, id: String)
POST     /v2/annotations/:typ/:id/duplicate                                   controllers.LegacyApiController.annotationDuplicateV4(typ: String, id: String)
PATCH    /v2/annotations/:typ/:id/reopen                                      controllers.LegacyApiController.annotationReopenV4(typ: String, id: String)
PUT      /v2/annotations/:typ/:id/reset                                       controllers.LegacyApiController.annotationResetV4(typ: String, id: String)
GET      /v2/user/annotations                                                 controllers.LegacyApiController.annotationListForCurrentUserV4(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v2/user/tasks                                                       controllers.LegacyApiController.annotationTasksV4(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v2/users/:id/annotations                                            controllers.LegacyApiController.annotationListByUserV4(id: String, isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v2/users/:id/tasks                                                  controllers.LegacyApiController.annotationTasksByUserV4(id: String, isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v2/tasks/:id/annotations                                            controllers.LegacyApiController.annotationsForTaskV4(id: String)
POST     /v2/datasets/:organizationName/:datasetName/createExplorational      controllers.LegacyApiController.annotationCreateExplorationalV4(organizationName: String, datasetName: String)

# Support changes to v4
POST     /v2/tasks/list                                                       controllers.LegacyApiController.taskListTasks
GET      /v2/projects/:name                                                   controllers.LegacyApiController.projectRead(name: String)
DELETE   /v2/projects/:name                                                   controllers.LegacyApiController.projectDelete(name: String)
PUT      /v2/projects/:name                                                   controllers.LegacyApiController.projectUpdate(name: String)
GET      /v2/projects/:name/tasks                                             controllers.LegacyApiController.projectTasksForProject(name: String, limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
PATCH    /v2/projects/:name/incrementEachTasksInstances                       controllers.LegacyApiController.projectIncrementEachTasksInstances(name: String, delta: Option[Long])
PATCH    /v2/projects/:name/pause                                             controllers.LegacyApiController.projectPause(name: String)
PATCH    /v2/projects/:name/resume                                            controllers.LegacyApiController.projectResume(name: String)

->       /v2/                                                                 webknossos.latest.Routes

# Support changes to v2 and v3, and v5
GET      /v1/annotations/:typ/:id/info                                        controllers.LegacyApiController.annotationInfoV1(typ: String, id: String)
PATCH    /v1/annotations/:typ/:id/finish                                      controllers.LegacyApiController.annotationFinishV1(typ: String, id: String)
POST     /v1/annotations/:typ/:id/merge/:mergedTyp/:mergedId                  controllers.LegacyApiController.annotationMergeV1(typ: String, id: String, mergedTyp: String, mergedId: String)
PATCH    /v1/annotations/:typ/:id/edit                                        controllers.LegacyApiController.annotationEditV1(typ: String, id: String)
POST     /v1/annotations/:typ/:id/duplicate                                   controllers.LegacyApiController.annotationDuplicateV1(typ: String, id: String)
PATCH    /v1/annotations/:typ/:id/reopen                                      controllers.LegacyApiController.annotationReopenV1(typ: String, id: String)
PUT      /v1/annotations/:typ/:id/reset                                       controllers.LegacyApiController.annotationResetV1(typ: String, id: String)
GET      /v1/user/annotations                                                 controllers.LegacyApiController.annotationListForCurrentUserV1(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v1/user/tasks                                                       controllers.LegacyApiController.annotationTasksV1(isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v1/users/:id/annotations                                            controllers.LegacyApiController.annotationListByUserV1(id: String, isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v1/users/:id/tasks                                                  controllers.LegacyApiController.annotationTasksByUserV1(id: String, isFinished: Option[Boolean], limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
GET      /v1/tasks/:id/annotations                                            controllers.LegacyApiController.annotationsForTaskV1(id: String)
POST     /v1/datasets/:organizationName/:datasetName/createExplorational      controllers.LegacyApiController.annotationCreateExplorationalV1(organizationName: String, datasetName: String)

# Support changes to v4
POST     /v1/tasks/list                                                       controllers.LegacyApiController.taskListTasks
GET      /v1/projects/:name                                                   controllers.LegacyApiController.projectRead(name: String)
DELETE   /v1/projects/:name                                                   controllers.LegacyApiController.projectDelete(name: String)
PUT      /v1/projects/:name                                                   controllers.LegacyApiController.projectUpdate(name: String)
GET      /v1/projects/:name/tasks                                             controllers.LegacyApiController.projectTasksForProject(name: String, limit: Option[Int], pageNumber: Option[Int], includeTotalCount: Option[Boolean])
PATCH    /v1/projects/:name/incrementEachTasksInstances                       controllers.LegacyApiController.projectIncrementEachTasksInstances(name: String, delta: Option[Long])
PATCH    /v1/projects/:name/pause                                             controllers.LegacyApiController.projectPause(name: String)
PATCH    /v1/projects/:name/resume                                            controllers.LegacyApiController.projectResume(name: String)


->       /v1/                                                                 webknossos.latest.Routes


->       /                                                                    webknossos.latest.Routes
