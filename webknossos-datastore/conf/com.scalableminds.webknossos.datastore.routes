# Datastore Routes (Higher priority routes first)


# Health endpoint
GET           /health                                                                                                               @com.scalableminds.webknossos.datastore.controllers.Application.health

# Read image data
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/data                                                   @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestViaWebKnossos(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/data                                                   @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestRawCuboid(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, x: Int, y: Int, z: Int, width: Int, height: Int, depth: Int, mag: Option[String], zoomStep: Option[Int], halfByte: Boolean ?= false)
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/thumbnail.jpg                                          @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.thumbnailJpeg(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, width: Int, height: Int, centerX: Option[Int], centerY: Option[Int], centerZ: Option[Int], zoom: Option[Double])
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/findData                                               @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.findData(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/colorStatistics                                        @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.colorStatistics(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/histogram                                              @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.histogram(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)

# Knossos compatible routes
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/mag:resolution/x:x/y:y/z:z/bucket.raw                  @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestViaKnossos(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, resolution: Int, x: Int, y: Int, z: Int, cubeSize: Int)

# Zarr compatible routes
GET           /zarr/:organizationName/:dataSetName/:dataLayerName/:mag/.zarray                                                      @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zArray(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, mag: String)
GET           /zarr/:organizationName/:dataSetName/:dataLayerName/:mag/:cxyz                                                        @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.rawZarrCube(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, mag: String, cxyz: String)
GET           /zarr/:organizationName/:dataSetName/datasource-properties.json                                                       @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSource(token: Option[String], organizationName: String, dataSetName: String)
GET           /zarr/:organizationName/:dataSetName/:dataLayerName/.zgroup                                                           @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zGroup(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
GET           /zarr/:organizationName/:dataSetName/.zgroup                                                                          @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.zGroup(token: Option[String], organizationName: String, dataSetName: String, dataLayerName="")
GET           /zarr/:organizationName/:dataSetName/                                                                                 @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceFolderContents(token: Option[String], organizationName: String, dataSetName: String)
GET           /zarr/:organizationName/:dataSetName/:dataLayerName                                                                   @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerFolderContents(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
GET           /zarr/:organizationName/:dataSetName/:dataLayerName/:mag                                                              @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataLayerMagFolderContents(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, mag: String)
GET           /zarr/:organizationName/:dataSetName                                                                                  @com.scalableminds.webknossos.datastore.controllers.ZarrStreamingController.dataSourceFolderContents(token: Option[String], organizationName: String, dataSetName: String)

# Segmentation mappings
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/mappings/:mappingName                                  @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.mappingJson(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, mappingName: String)
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/mappings                                               @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listMappings(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)

# Agglomerate files
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/agglomerates                                           @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listAgglomerates(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/agglomerates/:mappingName/skeleton/:agglomerateId      @com.scalableminds.webknossos.datastore.controllers.DataSourceController.generateAgglomerateSkeleton(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, mappingName: String, agglomerateId: Long)

# Mesh files
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/meshes                                                 @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listMeshFiles(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/meshes/chunks                                          @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listMeshChunksForSegment(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/meshes/chunks/data                                     @com.scalableminds.webknossos.datastore.controllers.DataSourceController.readMeshChunk(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)

# Connectome files
GET           /datasets/:organizationName/:dataSetName/layers/:dataLayerName/connectomes                                            @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listConnectomeFiles(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/connectomes/synapses/positions                         @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapsePositions(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/connectomes/synapses/types                             @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapseTypes(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/connectomes/synapses/:direction                        @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapticPartnerForSynapses(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, direction: String)
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/connectomes/synapses                                   @com.scalableminds.webknossos.datastore.controllers.DataSourceController.getSynapsesForAgglomerates(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)

# Isosurfaces
POST          /datasets/:organizationName/:dataSetName/layers/:dataLayerName/isosurface                                             @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestIsosurface(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)

# DataSource management
GET           /datasets                                                                                                             @com.scalableminds.webknossos.datastore.controllers.DataSourceController.list(token: Option[String])
POST          /datasets                                                                                                             @com.scalableminds.webknossos.datastore.controllers.DataSourceController.uploadChunk(token: String)
POST          /datasets/reserveUpload                                                                                               @com.scalableminds.webknossos.datastore.controllers.DataSourceController.reserveUpload(token: String)
POST          /datasets/finishUpload                                                                                                @com.scalableminds.webknossos.datastore.controllers.DataSourceController.finishUpload(token: String)
POST          /datasets/cancelUpload                                                                                                @com.scalableminds.webknossos.datastore.controllers.DataSourceController.cancelUpload(token: String)
GET           /datasets/:organizationName/:dataSetName/readInboxDataSourceLike                                                      @com.scalableminds.webknossos.datastore.controllers.DataSourceController.read(token: Option[String], organizationName: String, dataSetName: String, returnFormatLike: Boolean ?= true)
GET           /datasets/:organizationName/:dataSetName/readInboxDataSource                                                          @com.scalableminds.webknossos.datastore.controllers.DataSourceController.read(token: Option[String], organizationName: String, dataSetName: String, returnFormatLike: Boolean ?= false)
POST          /datasets/:organizationName/:dataSetName                                                                              @com.scalableminds.webknossos.datastore.controllers.DataSourceController.update(token: Option[String], organizationName: String, dataSetName: String)
GET           /datasets/:organizationName/:dataSetName                                                                              @com.scalableminds.webknossos.datastore.controllers.DataSourceController.explore(token: Option[String], organizationName: String, dataSetName: String)
DELETE        /datasets/:organizationName/:dataSetName/deleteOnDisk                                                                 @com.scalableminds.webknossos.datastore.controllers.DataSourceController.deleteOnDisk(token: Option[String], organizationName: String, dataSetName: String)

# Actions
POST          /triggers/checkInboxBlocking                                                                                          @com.scalableminds.webknossos.datastore.controllers.DataSourceController.triggerInboxCheckBlocking(token: Option[String])
POST          /triggers/newOrganizationFolder                                                                                       @com.scalableminds.webknossos.datastore.controllers.DataSourceController.createOrganizationDirectory(token: Option[String], organizationName: String)
POST          /triggers/reload/:organizationName/:dataSetName                                                                       @com.scalableminds.webknossos.datastore.controllers.DataSourceController.reload(token: Option[String], organizationName: String, dataSetName: String, layerName: Option[String])

# Exports
GET           /exports/:jobId/download                                                                                              @com.scalableminds.webknossos.datastore.controllers.ExportsController.download(token: Option[String], jobId: String)
