http {
  uri = "http://localhost:9000"
  port = 9000
}

play {
  modules {
    enabled += "WebKnossosModule"
    enabled += "SilhouetteModule"
    enabled += "com.scalableminds.webknossos.datastore.DataStoreModule"
    enabled += "com.scalableminds.webknossos.tracingstore.TracingStoreModule"
    enabled += "play.modules.swagger.SwaggerModule"
  }
  http {
    secret.key = "$JUeGY5yhw~pw%`pyVeDF*}`sF^kL'@sF$=dSTx?<z*f/vFg"
    parser {
      maxMemoryBuffer = 250M
      maxDiskBuffer = 1G
    }
    filters = "com.scalableminds.webknossos.datastore.Filters"
  }
  filters.headers {
    # Unset some of the security filters enabled in datastore.Filters
    contentSecurityPolicy = null
    contentTypeOptions = null
    frameOptions = null
  }
  # Timeouts. Note that these take effect only in production mode (timeouts are shorter in dev)
  server {
    http.idleTimeout = 2 hours
    akka.requestTimeout = 2 hours
  }
  assets {
    cache {
      /public/bundle = null # recommended for production: "public, max-age=31536000, immutable"
      /public/fonts = null # recommended for production: "public, max-age=604800"
      /public/images = null # recommended for production: "public, max-age=604800"
    }
  }
}

webKnossos {
  tabTitle = "webKnossos"
  user {
    timeTrackingPause = 60 seconds
    inviteExpiry = 14 days
    ssoKey = ""
  }
  tasks.maxOpenPerUser = 5
  newOrganizationMailingList = ""
  cache {
    user.timeout = 3 minutes
  }
  sampleOrganization {
    enabled = true
    user {
      email = "sample@scm.io"
      password = "secret"
      token = "secretSampleUserToken"
      isSuperUser = true
    }
  }
  operatorData = """
    **This is a dev deployment**

    Please add the information of the operator to comply with GDPR.
  """
}

# This part of the config is exposed as JSON via /api/features
features {
  discussionBoard = "https://forum.image.sc/tag/webknossos"
  discussionBoardRequiresAdmin = false
  addForeignDataset = false
  hideNavbarLogin = false
  isDemoInstance = false
  taskReopenAllowedInSeconds = 30
  allowDeleteDatasets = true
  # to enable jobs for local development, use "yarn enable-jobs" to also activate it in the database
  jobsEnabled = false
  # For new users, the dashboard will show a banner which encourages the user to check out the following dataset.
  # If isDemoInstance == true, `/createExplorative/hybrid/true` is appended to the URL so that a new tracing is opened.
  # If isDemoInstance == false, `/view` is appended to the URL so that it's opened in view mode (since the user might not
  # have an account).
  publicDemoDatasetUrl = "https://webknossos.org/datasets/scalable_minds/l4dense_motta_et_al_demo"
  exportTiffMaxVolumeMVx = 1024
  exportTiffMaxEdgeLengthVx = 8192
  defaultToLegacyBindings = false
  # The Only valid item value is currently "ConnectomeView":
  optInTabs = []
}

# Serve annotations. Only active if the corresponding play module is enabled
tracingstore {
  key = "something-secure"
  name = "localhost"
  publicUri = ${http.uri}
  webKnossos {
    uri = ${http.uri}
  }
  fossildb {
    address = "localhost"
    port = 7155
  }
  redis {
    address = "localhost"
    port = 6379
  }
}

# Serve image data. Only active if the corresponding play module is enabled
datastore {
  key = "something-secure"
  name = "localhost"
  publicUri = ${http.uri}
  webKnossos {
    uri = ${http.uri}
    pingInterval = 10 minutes
  }
  baseFolder = "binaryData"
  watchFileSystem {
    enabled = true
    interval = 1 minute
  }
  cache {
    dataCube.maxEntries = 40
    mapping.maxEntries = 5
    agglomerateFile {
      maxFileHandleEntries = 15
      maxSegmentIdEntries = 625000
      blockSize = 512 # ideal value ~= file system block size / bytes per id
      cumsumMaxReaderRange = 1310720
    }
  }
  isosurface {
    timeout = 30 seconds
    actorPoolSize = 1
  }
  redis {
    address = "localhost"
    port = 6379
  }
  agglomerateSkeleton.maxEdges = 10000
}

# Proxy some routes to prefix + route (only if features.isDemoInstance, route "/" only if logged out)
proxy {
  prefix = ""
  routes = []
}

# Send emails to users and admins
mail {
  logToStdout = false # To protect privacy, always set to false in production
  smtp {
    host = ""
    port = 465
    tls = true
    auth = true
    user = ""
    pass = ""
  }
  defaultSender = "webKnossos <no-reply@webknossos.org>"
  reply = "webKnossos <no-reply@webknossos.org>"
  mailchimp {
    host = ""
    listId = ""
    user = ""
    password = ""
  }
}

# SQL database connection
slick = {
  profile = "slick.jdbc.PostgresProfile$"
  codegen.package = "com.scalableminds.webknossos.schema"
  db = {
    url = "jdbc:postgresql://localhost/webknossos"
    url = ${?POSTGRES_URL}
    driver = org.postgresql.Driver
    keepAliveConnection = true
    user = "postgres"
    password = "postgres"
    queueSize = 5000
  }
}

# Authentication via cookies and tokens
silhouette {
  cookieAuthenticator {
    cookieName = "id"
    cookiePath = "/"
    secureCookie = false
    httpOnlyCookie = true
    useFingerprinting = true
    authenticatorExpiry = 30 days
    cookieMaxAge = 365 days
  }

  tokenAuthenticator {
    authenticatorExpiry = 23000 days # must fit as seconds in 32bit signed int
    authenticatorIdleTimeout = 23000 days
    resetPasswordExpiry = 1 day
    dataStoreExpiry = 1 day
  }

  oauth1TokenSecretProvider {
    cookieName = "OAuth1TokenSecret"
    cookiePath = "/"
    secureCookie = false
    httpOnlyCookie = true
    expirationTime = 5 minutes
  }
}

# Execute long-running jobs
jobs {
  workerLivenessTimeout = 1 minute
}

# Automatically register users on braintracing.org
braintracing {
  enabled = false
  organizationName = "sample_organization" # only users signing up for this organization will be registered on braintracing
  uri = "http://braintracing.org/"
  createUserScript = "oxalis_create_user.php"
  user = ""
  password = ""
  license = ""
}

# Front-end analytics
airbrake {
  environment = "dev-local"
  projectKey = "insert-valid-projectKey-here"
  projectID = "insert-valid-projectID-here"
}

# Front-end analytics
googleAnalytics.trackingId = ""

# Back-end analytics
slackNotifications {
  uri = ""
  verboseLoggingEnabled = false # log all slack messages also to stdout
}

# Back-end analytics
backendAnalytics {
  uri = "https://events-relay.webknossos.org/events"
  uri = ${?DEV_WK_ANALYTICS_URI}
  key = ""
  sessionPause = 30 minutes
  verboseLoggingEnabled = false
}

swagger.api.info {
  title = "webknossos"
}

# Avoid creation of a pid file
pidfile.path = "/dev/null"
