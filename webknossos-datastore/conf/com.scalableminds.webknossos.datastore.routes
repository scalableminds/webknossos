# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Health endpoint
GET         /health                                                                                                               @com.scalableminds.webknossos.datastore.controllers.Application.health

# Read binary data
POST        /datasets/:organizationName/:dataSetName/layers/:dataLayerName/data                                                   @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestViaWebKnossos(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/data                                                   @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestRawCuboid(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, x: Int, y: Int, z: Int, width: Int, height: Int, depth: Int, resolution: Int, halfByte: Boolean ?= false)
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/data                                                   @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestViaAjaxDebug(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, cubeSize: Int, x: Int, y: Int, z: Int, resolution: Int, halfByte: Boolean ?= false)
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/sprite                                                 @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestSpriteSheet(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, cubeSize: Int ?=128, imagesPerRow: Int ?= 8, x: Int, y: Int, z: Int, resolution: Int, halfByte: Boolean ?= false)
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/image.jpg                                              @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestImage(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, width: Int, height: Int, x: Int, y: Int, z: Int, resolution: Int, halfByte: Boolean ?= false, blackAndWhite: Boolean ?= false)
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/thumbnail.json                                         @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestImageThumbnailJson(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, width: Int, height: Int, centerX: Option[Int], centerY: Option[Int], centerZ: Option[Int], zoom: Option[Double])
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/thumbnail.jpg                                          @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestImageThumbnailJpeg(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, width: Int, height: Int, centerX: Option[Int], centerY: Option[Int], centerZ: Option[Int], zoom: Option[Double])
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/findData                                               @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.findData(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/colorStatistics                                        @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.colorStatistics(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/histogram                                              @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.createHistogram(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)

# Knossos compatibale routes
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/mag:resolution/x:x/y:y/z:z/bucket.raw                  @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestViaKnossos(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, resolution: Int, x: Int, y: Int, z: Int, cubeSize: Int)

# Segmentation mappings
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/mappings/:mappingName                                  @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestMapping(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, mappingName: String)
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/mappings                                               @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listMappings(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)

# Agglomerate files
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/agglomerates                                           @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listAgglomerates(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/agglomerates/:mappingName/skeleton/:agglomerateId      @com.scalableminds.webknossos.datastore.controllers.DataSourceController.generateAgglomerateSkeleton(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String, mappingName: String, agglomerateId: Long)

# Mesh files
GET         /datasets/:organizationName/:dataSetName/layers/:dataLayerName/meshes                                                 @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listMeshFiles(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
POST        /datasets/:organizationName/:dataSetName/layers/:dataLayerName/meshes/chunks                                          @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listMeshChunksForSegment(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)
POST        /datasets/:organizationName/:dataSetName/layers/:dataLayerName/meshes/chunks/data                                     @com.scalableminds.webknossos.datastore.controllers.DataSourceController.readMeshChunk(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)

# Isosurfaces
POST        /datasets/:organizationName/:dataSetName/layers/:dataLayerName/isosurface                                             @com.scalableminds.webknossos.datastore.controllers.BinaryDataController.requestIsosurface(token: Option[String], organizationName: String, dataSetName: String, dataLayerName: String)

# DataSource management
GET         /datasets                                                                                                             @com.scalableminds.webknossos.datastore.controllers.DataSourceController.list(token: Option[String])
POST        /datasets                                                                                                             @com.scalableminds.webknossos.datastore.controllers.DataSourceController.uploadChunk(token: String)
POST        /datasets/reserveUpload                                                                                               @com.scalableminds.webknossos.datastore.controllers.DataSourceController.reserveUpload(token: String)
POST        /datasets/finishUpload                                                                                                @com.scalableminds.webknossos.datastore.controllers.DataSourceController.finishUpload(token: String)
GET         /datasets/:organizationName/:dataSetName/readInboxDataSourceLike                                                      @com.scalableminds.webknossos.datastore.controllers.DataSourceController.read(token: Option[String], organizationName: String, dataSetName: String, returnFormatLike: Boolean ?= true)
GET         /datasets/:organizationName/:dataSetName/readInboxDataSource                                                          @com.scalableminds.webknossos.datastore.controllers.DataSourceController.read(token: Option[String], organizationName: String, dataSetName: String, returnFormatLike: Boolean ?= false)
GET         /datasets/sample/:organizationName                                                                                    @com.scalableminds.webknossos.datastore.controllers.DataSourceController.listSampleDataSources(token: Option[String], organizationName: String)
POST        /datasets/sample/:organizationName/:dataSetName/download                                                              @com.scalableminds.webknossos.datastore.controllers.DataSourceController.fetchSampleDataSource(token: Option[String], organizationName: String, dataSetName: String)
POST        /datasets/:organizationName/:dataSetName                                                                              @com.scalableminds.webknossos.datastore.controllers.DataSourceController.update(token: Option[String], organizationName: String, dataSetName: String)
GET         /datasets/:organizationName/:dataSetName                                                                              @com.scalableminds.webknossos.datastore.controllers.DataSourceController.explore(token: Option[String], organizationName: String, dataSetName: String)
DELETE      /datasets/:organizationName/:dataSetName/deleteOnDisk                                                                 @com.scalableminds.webknossos.datastore.controllers.DataSourceController.deleteOnDisk(token: Option[String], organizationName: String, dataSetName: String)

# Actions
GET         /triggers/checkInbox                                                                                                  @com.scalableminds.webknossos.datastore.controllers.DataSourceController.triggerInboxCheck(token: Option[String])
GET         /triggers/checkInboxBlocking                                                                                          @com.scalableminds.webknossos.datastore.controllers.DataSourceController.triggerInboxCheckBlocking(token: Option[String])
GET         /triggers/newOrganizationFolder                                                                                       @com.scalableminds.webknossos.datastore.controllers.DataSourceController.createOrganizationDirectory(token: Option[String], organizationName: String)
GET         /triggers/reload/:organizationName/:dataSetName                                                                       @com.scalableminds.webknossos.datastore.controllers.DataSourceController.reload(token: Option[String], organizationName: String, dataSetName: String, layerName: Option[String])
