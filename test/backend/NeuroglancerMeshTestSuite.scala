package backend

import com.scalableminds.util.geometry.Vec3Float
import com.scalableminds.webknossos.datastore.services.mesh.NeuroglancerSegmentManifest
import org.scalatestplus.play.PlaySpec

import java.util.Base64

class NeuroglancerMeshTestSuite extends PlaySpec {

  "Neuroglancer Meshes" when {
    "parsing the segment manifest" should {
      "return the correct segment manifest" in {
        // These bytes come from the gs://fafb-ffn1-20190805/segmentation/ mesh
        val manifestByteString =
          "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"
        val manifestBytes = Base64.getDecoder.decode(manifestByteString.getBytes("UTF-8"))

        val manifest = NeuroglancerSegmentManifest.fromBytes(manifestBytes)
        assert(manifest.chunkShape == Vec3Float(1024, 1024, 512))
        assert(manifest.gridOrigin == Vec3Float(0, 0, 0))
        assert(manifest.numLods == 4)
        assert(manifest.numChunksPerLod.head == 60)
        assert(manifest.chunkPositions.head.length == 60)
      }
    }
  }

}
