name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
    inputs:
      tmate_debug_build:
        type: boolean
        description: "Debug Build Job"
        required: false
        default: false
      tmate_debug_e2e_tests:
        type: boolean
        description: "Debug e2e Tests"
        required: false
        default: false
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

env:
  USER_NAME: root
  USER_UID: 1000
  USER_GID: 1000
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  POSTGRES_PASSWORD: "secret_password"

jobs:
  static_frontend_code_checks:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 5
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: corepack enable
      - uses: actions/cache@v4
        id: node_modules
        with:
          path: |
            tools/postgres/node_modules
            tools/proxy/node_modules
            node_modules
          key: node_modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install frontend dependencies
        if: steps.node_modules.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - name: Lint frontend code and check formatting
        run: yarn run check-frontend
      - name: Typecheck frontend code
        run: yarn typecheck
      - name: Check for cyclic dependencies in frontend
        run: yarn check-cyclic-dependencies

  build_test_deploy:
    runs-on: ubuntu-24.04
    env:
      USER_UID: 1001
      USER_GID: 1001
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 5
      - name: "Custom environment variables"
        id: configure
        run: |
          if [[ ${{ github.ref_type }} == "branch" ]]; then
            NORMALIZED_BRANCH=$(echo ${{ github.ref_name }} | sed 's/[\/-]/_/g')
            echo "normalized_branch=$NORMALIZED_BRANCH" >> "$GITHUB_OUTPUT"
            DOCKER_TAG="${NORMALIZED_BRANCH}__${{ github.run_number }}"
            echo "docker_tag=$DOCKER_TAG" >> "$GITHUB_OUTPUT"
            echo "DOCKER_TAG=$DOCKER_TAG" >> "$GITHUB_ENV"
            echo "NORMALIZED_BRANCH=$NORMALIZED_BRANCH" >> "$GITHUB_ENV"
          else
            echo "normalized_branch=master" >> "$GITHUB_OUTPUT"
            echo "docker_tag=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
            echo "DOCKER_TAG=master" >> "$GITHUB_ENV"
            echo "NORMALIZED_BRANCH=${{ github.ref_name }}" >> "$GITHUB_ENV"
          fi
      - name: tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.tmate_debug_build }}
      - name: Build webknossos-dev docker image
        run: |
          docker pull scalableminds/webknossos-dev:$NORMALIZED_BRANCH || true
          DEV_CACHE=$NORMALIZED_BRANCH docker compose build base
      - name: Prepare Dependency Folders
        run: mkdir -p project/target target ~/.ivy2 ~/.cache/coursier
      - name: Install frontend dependencies
        run: docker compose run -e PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true base yarn install --immutable
      - name: Assert unique evolution numbers
        run: docker compose run base tools/postgres/dbtool.js assert-unique-evolution-numbers
      - name: Assert schema.sql and evolutions are equal
        run: |
          docker compose up -d postgres
          sleep 3
          docker compose run compile tools/postgres/dbtool.js check-evolutions-schema
      - name: Assert that all migrations are mentioned in one migration guide and that they have a reversion counterpart.
        run: tools/assert-complete-migrations.sh
      - name: Build frontend documentation
        run: |
          WK_VERSION=${CIRCLE_TAG:-${CIRCLE_BUILD_NUM:-dev}}
          docker compose run base yarn run docs --project-version $WK_VERSION
      - name: Build webknossos (webpack)
        run: docker compose run base yarn build
      - name: Build webknossos (sbt)
        run: |
          if [ "${CIRCLE_BRANCH}" == 'master' ]; then
            docker compose run compile sbt -no-colors clean compile stage
          else
            docker compose run compile sbt -no-colors -DfailOnWarning compile stage
          fi
      - name: Build webknossos-datastore (sbt)
        run: docker compose run base sbt -no-colors -DfailOnWarning "project webknossosDatastore" copyMessages compile stage
      - name: Build webknossos-tracingstore (sbt)
        run: docker compose run base sbt -no-colors -DfailOnWarning "project webknossosTracingstore" copyMessages compile stage
      - name: Checksum App Dirs
        run: find app webknossos-datastore/app webknossos-tracingstore/app -type f -exec md5sum {} \; | sort -k 2 | md5sum > app_checksum.txt
      - name: Build webknossos docker image
        run: |
          docker pull scalableminds/webknossos:$NORMALIZED_BRANCH || true
          DEV_CACHE=$NORMALIZED_BRANCH docker compose build --pull webknossos
      - name: Build webknossos-datastore docker image
        run: docker compose build --pull webknossos-datastore
      - name: Build webknossos-tracingstore docker image
        run: docker compose build --pull webknossos-tracingstore
      - name: Lint frontend code and check formatting
        if: ${{ github.ref_name != 'master' }}
        run: docker compose run base bash -c "yarn run check-frontend"
      - name: Check for cyclic dependencies in front-end
        if: ${{ github.ref_name != 'master' }}
        run: docker compose run base yarn check-cyclic-dependencies
      - name: Run frontend tests
        if: ${{ github.ref_name != 'master' }}
        run: docker compose run base yarn test-verbose
      - name: Lint backend code and check formatting
        if: ${{ github.ref_name != 'master' }}
        run: docker compose run backend-lint-format
      - name: Run backend tests
        if: ${{ github.ref_name != 'master' }}
        run: docker compose run backend-tests
      - name: Run end-to-end tests
        if: ${{ github.ref_name != 'master' }}
        run: |
          mkdir -p binaryData/Organization_X && chmod 777 binaryData/Organization_X
          for i in {1..3}; do # retry
            docker compose run e2e-tests && s=0 && break || s=$?
          done
          (exit $s)
      - name: Validate frontend types
        if: ${{ github.ref_name != 'master' }}
        run: docker compose run base yarn typecheck
      - name: Start webknossos, datastore and tracingstore
        run: docker compose up -d webknossos && docker compose up -d webknossos-datastore && docker compose up -d webknossos-tracingstore
      - name: Run webknossos smoke test
        run: |
          for i in {1..20}; do # retry
            curl --fail -v http://localhost:9000/api/health && s=0 && break || s=$?
            sleep 5
          done
          (exit $s)
      - name: Run webknossos-datastore smoke test
        run: |
          for i in {1..20}; do # retry
            curl --fail -v http://localhost:9090/data/health && s=0 && break || s=$?
            sleep 5
          done
          (exit $s)
      - name: Run webknossos-tracingstore smoke test
        run: |
          for i in {1..20}; do # retry
            curl --fail -v http://localhost:9050/tracings/health && s=0 && break || s=$?
            sleep 5
          done
          (exit $s)
      - name: Stop webknossos, datastore and tracingstore
        run: docker compose down --volumes --remove-orphans
      - name: Push docker images
        run: |
          function retry() {
            for i in {1..5}; do
              "$@" && s=0 && break || s=$?
              sleep 10
            done
            return $s
          }
          retry sh -c 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
          retry docker compose push webknossos
          retry docker compose push webknossos-datastore
          retry docker compose push webknossos-tracingstore
          if [ -n "$CIRCLE_BRANCH" ]; then
            docker tag \
              scalableminds/webknossos:${DOCKER_TAG} \
              scalableminds/webknossos:${NORMALIZED_BRANCH}
            retry docker push scalableminds/webknossos:${NORMALIZED_BRANCH}
            docker tag \
              scalableminds/webknossos-datastore:${DOCKER_TAG} \
              scalableminds/webknossos-datastore:${NORMALIZED_BRANCH}
            retry docker push scalableminds/webknossos-datastore:${NORMALIZED_BRANCH}
            docker tag \
              scalableminds/webknossos-tracingstore:${DOCKER_TAG} \
              scalableminds/webknossos-tracingstore:${NORMALIZED_BRANCH}
            retry docker push scalableminds/webknossos-tracingstore:${NORMALIZED_BRANCH}
            docker tag \
              scalableminds/webknossos-dev \
              scalableminds/webknossos-dev:${NORMALIZED_BRANCH}
            retry docker push scalableminds/webknossos-dev:${NORMALIZED_BRANCH}
          fi
          docker logout
      - name: Report coverage
        if: ${{ github.ref_name != 'master' }}
        run: docker compose run base yarn coverage || true
      - name: Send Slack notification (master only)
        run: .circleci/slack-notification.sh
