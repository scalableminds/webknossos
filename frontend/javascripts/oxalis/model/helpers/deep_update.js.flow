// @flow
import type { OxalisState } from "oxalis/store";

type OxalisKey<K> = $ElementType<OxalisState, K>;
type OxalisKey2<K1, K2> = $ElementType<OxalisKey<K1>, K2>;
type OxalisKey3<K1, K2, K3> = $ElementType<OxalisKey2<K1, K2>, K3>;
type OxalisKey4<K1, K2, K3, K4> = $ElementType<OxalisKey3<K1, K2, K3>, K4>;

type WriteableShape<T> = $Shape<$Exact<{ ...T }>>;
export type StateShape1<K1> = WriteableShape<OxalisKey<K1>>;
export type StateShape2<K1, K2> = WriteableShape<OxalisKey2<K1, K2>>;
export type StateShape3<K1, K2, K3> = WriteableShape<OxalisKey3<K1, K2, K3>>;
export type StateShape4<K1, K2, K3, K4> = WriteableShape<OxalisKey4<K1, K2, K3, K4>>;

declare export function updateKey<Key: $Keys<OxalisState>>(
  state: OxalisState,
  key: Key,
  shape: StateShape1<Key>,
): OxalisState

declare export function updateKey2<Key1: $Keys<OxalisState>, Key2: $Keys<OxalisKey<Key1>>>(
  state: OxalisState,
  key1: Key1,
  key2: Key2,
  shape: WriteableShape<OxalisKey2<Key1, Key2>>,
): OxalisState

declare export function updateKey3<
    Key1: $Keys<OxalisState>,
    Key2: $Keys<OxalisKey<Key1>>,
    Key3: $Keys<OxalisKey2<Key1, Key2>>
>(
  state: OxalisState,
  key1: Key1,
  key2: Key2,
  key3: Key3,
  shape: WriteableShape<OxalisKey3<Key1, Key2, Key3>>,
): OxalisState

declare export function updateKey4<
    Key1: $Keys<OxalisState>,
    Key2: $Keys<OxalisKey<Key1>>,
    Key3: $Keys<OxalisKey2<Key1, Key2>>,
    Key4: $Keys<OxalisKey3<Key1, Key2, Key3>>
>(
  state: OxalisState,
  key1: Key1,
  key2: Key2,
  key3: Key3,
  key4: Key4,
  shape: WriteableShape<OxalisKey4<Key1, Key2, Key3, Key4>>,
): OxalisState
