# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# The general pages
GET           /                                                                 controllers.Application.index
GET           /dashboard                                                        controllers.UserController.empty
GET           /impressum                                                        controllers.Application.impressum
GET           /info                                                             controllers.Application.info
GET           /thankyou                                                         controllers.Application.thankyou
GET           /spotlight                                                        controllers.DataSetController.userAwareEmpty
GET           /api/buildinfo                                                    controllers.Application.buildInfo
POST          /api/analytics/:namespace                                         controllers.Application.analytics(namespace)

# Help section
GET           /help/faq                                                         controllers.HelpController.faq
GET           /help/keyboardshortcuts                                           controllers.HelpController.keyboardShortcuts

# Authentication
GET           /auth/login                                                       controllers.Authentication.login(redirect: Option[String])
POST          /auth/login                                                       controllers.Authentication.authenticate
GET           /auth/switch                                                      controllers.Authentication.switchTo(to: String)
GET           /auth/logout                                                      controllers.Authentication.logout
GET           /auth/register                                                    controllers.Authentication.register
POST          /auth/register                                                    controllers.Authentication.handleRegistration
GET           /auth/sso                                                         controllers.Authentication.singleSignOn(sso: String, sig: String)

# Configurations
GET           /api/userConfigurations/default                                   controllers.ConfigurationController.default
GET           /api/user/userConfiguration                                       controllers.ConfigurationController.read
POST          /api/user/userConfiguration                                       controllers.ConfigurationController.update
GET           /api/dataSetConfigurations/default                                controllers.ConfigurationController.defaultDataSet
GET           /api/dataSetConfigurations/:dataSetName                           controllers.ConfigurationController.readDataSet(dataSetName: String)
POST          /api/dataSetConfigurations/:dataSetName                           controllers.ConfigurationController.updateDataSet(dataSetName: String)

# Users
GET           /user/tasks/request                                               controllers.TaskController.request
GET           /user/tasks/peek                                                  controllers.TaskController.peekNext(limit: Int ?= 10)
GET           /users/:id/details                                                controllers.UserController.emptyWithWildcard(id)
GET           /users                                                            controllers.UserController.empty
GET           /user/password/reset                                              controllers.UserController.resetPassword
POST          /user/password/reset                                              controllers.UserController.handleResetPassword

GET           /api/users                                                        controllers.UserController.list
GET           /api/user                                                         controllers.UserController.current
GET           /api/user/tasks                                                   controllers.UserController.tasks(isFinished: Option[Boolean], limit: Option[Int])
GET           /api/user/annotations                                             controllers.UserController.annotations(isFinished: Option[Boolean], limit: Option[Int])
GET           /api/user/loggedTime                                              controllers.UserController.loggedTime
GET           /api/users/:id                                                    controllers.UserController.user(id: String)
PUT           /api/users/:id                                                    controllers.UserController.update(id: String)
GET           /api/users/:id/tasks                                              controllers.UserController.userTasks(id: String, isFinished: Option[Boolean], limit: Option[Int])
GET           /api/users/:id/loggedTime                                         controllers.UserController.userLoggedTime(id: String)
POST          /api/users/loggedTime                                             controllers.UserController.usersLoggedTime
GET           /api/users/:id/annotations                                        controllers.UserController.userAnnotations(id: String, isFinished: Option[Boolean], limit: Option[Int])
GET           /api/users/:id/annotations/download                               controllers.AnnotationIOController.userDownload(id: String)

# MTurk
GET           /hits/:id                                                         controllers.MTurkController.startAssignment(id: String, workerId: String, assignmentId: String)

# Team
GET           /teams                                                            controllers.TeamController.empty

GET           /api/teams                                                        controllers.TeamController.list
POST          /api/teams                                                        controllers.TeamController.create
DELETE        /api/teams/:id                                                    controllers.TeamController.delete(id: String)

# DataSets
GET           /datasets                                                         controllers.DataSetController.empty
GET           /datasets/:id/edit                                                controllers.DataSetController.emptyWithWildcard(id)
GET           /datasets/:id/import                                              controllers.DataSetController.emptyWithWildcard(id)
GET           /datasets/:dataSetName/view                                       controllers.DataSetController.view(dataSetName: String)
GET           /datasets/upload                                                  controllers.DataSetController.empty

GET           /api/datasets                                                     controllers.DataSetController.list
POST          /api/datasets                                                     controllers.DataSetController.create(typ: String)
GET           /api/datasets/:dataSetName                                        controllers.DataSetController.read(dataSetName: String)
POST          /api/datasets/:dataSetName                                        controllers.DataSetController.update(dataSetName: String)
GET           /api/datasets/:dataSetName/accessList                             controllers.DataSetController.accessList(dataSetName: String)
POST          /api/datasets/:dataSetName/teams                                  controllers.DataSetController.updateTeams(dataSetName: String)
GET           /api/datasets/:dataSetName/layers/:layer/thumbnail                controllers.DataSetController.thumbnail(dataSetName: String, layer: String)

# Datastores
GET           /api/datastores                                                   controllers.DataStoreController.list
POST          /api/datastores/:name/datasource                                  controllers.WKDataStoreController.updateOne(name: String)
POST          /api/datastores/:name/datasources                                 controllers.WKDataStoreController.updateAll(name: String)
POST          /api/datastores/:name/status                                      controllers.WKDataStoreController.statusUpdate(name: String)
POST          /api/datastores/:name/verifyUpload                                controllers.WKDataStoreController.validateDataSetUpload(name: String, token: String)

# Data Tokens
GET           /api/dataToken/validate                                           controllers.DataTokenController.validateUserAndDataSetToken(token: String, dataSetName: String, dataLayerName: String)
GET           /api/dataToken/generate                                           controllers.DataTokenController.generateToken(dataSetName: Option[String], dataLayerName: Option[String])
GET           /api/datasetToken/validate                                        controllers.DataTokenController.validateDataSetToken(token: String, dataSetName: String)

# Datstore Route Forwarding
->            /data/                                                            com.scalableminds.datastore.Routes

# Annotations
POST          /annotations/createExplorational                                  controllers.AnnotationController.createExplorational
POST          /admin/nml/upload                                                 controllers.AnnotationIOController.upload
GET           /annotations/:typ/:id/duplicate                                   controllers.AnnotationController.duplicate(typ: String, id: String)
POST          /annotations/:typ/:id/name                                        controllers.AnnotationController.nameExplorativeAnnotation(typ: String, id: String)
GET           /annotations/:typ/:id/finishAndRedirect                           controllers.AnnotationController.finishWithRedirect(typ: String, id: String)
GET           /annotations/:typ/:id/finish                                      controllers.AnnotationController.finish(typ: String, id: String)
POST          /annotations/:typ/finish                                          controllers.AnnotationController.finishAll(typ: String)
GET           /annotations/:typ/:id/reopen                                      controllers.AnnotationController.reopen(typ: String, id: String)
GET           /annotations/:typ/:id/reset                                       controllers.AnnotationController.reset(typ: String, id: String)
GET           /annotations/:typ/:id/revert                                      controllers.AnnotationController.revert(typ: String, id: String, version: Int)
POST          /annotations/:typ/:id/transfer                                    controllers.AnnotationController.transfer(typ: String, id: String)

GET           /annotations/:typ/:id                                             controllers.AnnotationController.empty(typ: String, id: String)
GET           /annotations/:typ/:id/readOnly                                    controllers.AnnotationController.empty(typ: String, id: String)
GET           /annotations/:typ/:id/info                                        controllers.AnnotationController.info(typ: String, id: String)
GET           /annotations/:typ/:id/readOnly/info                               controllers.AnnotationController.infoReadOnly(typ: String, id: String)
DELETE        /annotations/:typ/:id                                             controllers.AnnotationController.cancel(typ: String, id: String)
GET           /annotations/:typ/:id/merge/:mergedTyp/:mergedId/:readOnly        controllers.AnnotationController.merge(typ: String, id: String, mergedTyp: String, mergedId: String, readOnly: Boolean)

GET           /api/annotations/:typ/:id/loggedTime                              controllers.AnnotationController.loggedTime(typ: String, id: String)

# Tasks
GET           /tasks                                                            controllers.TaskController.empty
GET           /tasks/overview                                                   controllers.TaskController.empty
GET           /tasks/create                                                     controllers.TaskController.empty

GET           /api/queries                                                      controllers.QueryController.empty
POST          /api/queries                                                      controllers.QueryController.query(type: String, limit: Int ?= 1000)
GET           /api/descriptions/:element                                        controllers.QueryController.descriptions(element)

GET           /api/tasks                                                        controllers.TaskController.list
POST          /api/tasks                                                        controllers.TaskController.create(type: String)
GET           /api/tasks/workload                                               controllers.TaskController.requestAvailableTasks
GET           /api/tasks/:id                                                    controllers.TaskController.read(id: String)
DELETE        /api/tasks/:id                                                    controllers.TaskController.delete(id: String)
PUT           /api/tasks/:id                                                    controllers.TaskController.update(id: String)

GET           /tasks/:id/edit                                                   controllers.UserController.emptyWithWildcard(id: String)
GET           /workload                                                         controllers.TaskController.empty

GET           /api/tasks/:id/download                                           controllers.AnnotationIOController.taskDownload(id: String)
GET           /api/tasks/:id/annotations                                        controllers.AnnotationController.annotationsForTask(id: String)

# Task Types
GET           /taskTypes                                                        controllers.TaskTypeController.empty(id: String = "")
GET           /taskTypes/create                                                 controllers.TaskTypeController.empty(id: String = "")
GET           /taskTypes/:id/tasks                                              controllers.TaskTypeController.empty(id: String)
GET           /taskTypes/:id/edit                                               controllers.UserController.emptyWithWildcard(id: String)

GET           /api/taskTypes                                                    controllers.TaskTypeController.list
POST          /api/taskTypes                                                    controllers.TaskTypeController.create
DELETE        /api/taskTypes/:id                                                controllers.TaskTypeController.delete(id: String)
GET           /api/taskTypes/:id/tasks                                          controllers.TaskController.listTasksForType(id: String)

GET           /api/taskTypes/:id/download                                       controllers.AnnotationIOController.taskTypeDownload(id: String)
GET           /api/taskTypes/:id                                                controllers.TaskTypeController.get(id: String)
PUT           /api/taskTypes/:id                                                controllers.TaskTypeController.update(id: String)

# Scripts
GET           /scripts                                                          controllers.ScriptsController.empty(id: String = "")
GET           /scripts/create                                                   controllers.ScriptsController.empty(id: String = "")
GET           /scripts/:id/edit                                                 controllers.UserController.emptyWithWildcard(id: String)

GET           /api/scripts                                                      controllers.ScriptsController.list
POST          /api/scripts                                                      controllers.ScriptsController.create
GET           /api/scripts/:id                                                  controllers.ScriptsController.get(id: String)
PUT           /api/scripts/:id                                                  controllers.ScriptsController.update(id: String)
DELETE        /api/scripts/:id                                                  controllers.ScriptsController.delete(id: String)

# Projects
GET           /projects                                                         controllers.ProjectController.empty(name: String = "")
GET           /projects/create                                                  controllers.ProjectController.empty(name: String = "")
GET           /projects/:name/tasks                                             controllers.ProjectController.empty(name: String)
GET           /projects/:name/edit                                              controllers.ProjectController.empty(name: String)

GET           /api/projects                                                     controllers.ProjectController.list
POST          /api/projects                                                     controllers.ProjectController.create
GET           /api/projects/:name                                               controllers.ProjectController.read(name: String)
DELETE        /api/projects/:name                                               controllers.ProjectController.delete(name: String)
PUT           /api/projects/:name                                               controllers.ProjectController.update(name: String)
GET           /api/projects/:name/download                                      controllers.AnnotationIOController.projectDownload(name: String)
GET           /api/projects/:name/tasks                                         controllers.ProjectController.tasksForProject(name: String)
GET           /api/projects/:name/pause                                         controllers.ProjectController.pause(name: String)
GET           /api/projects/:name/resume                                        controllers.ProjectController.resume(name: String)

# Statistics
GET           /statistics                                                       controllers.StatisticsController.empty

GET           /api/statistics/webknossos                                        controllers.StatisticsController.webKnossos(interval: String, start: Option[Long], end: Option[Long])
GET           /api/statistics/users                                             controllers.StatisticsController.users(interval: String, start: Option[Long], end: Option[Long], limit: Int)
GET           /api/statistics/assignments                                       controllers.StatisticsController.assignmentStatistics(start: Option[Long], end: Option[Long])

# Javascript routing
GET           /assets/javascripts/routes.js                                     controllers.Application.javascriptRoutes

# Map static resources from the /public folder to the /public path
GET           /assets/*file                                                     controllers.Assets.at(path="/public", file)
